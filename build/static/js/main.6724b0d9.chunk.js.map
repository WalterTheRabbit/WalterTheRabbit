{"version":3,"sources":["utils/walletConnect.ts","helpers/solana.ts","helpers/namespaces.ts","contexts/walletConnect.tsx","helpers/utilities.ts","rpc/api.ts","rpc/infura-api.ts","rpc/rpc-api.ts","helpers/tx.ts","consts/default.ts","consts/action-types.const.ts","utils/index.ts","consts/chains.ts","enums/user-types.enum.ts","pages/landing.tsx","services/axios.ts","store/actions/user.action.ts","models/state.model.ts","reportWebVitals.ts","store/states/user.state.ts","store/reducer/index.ts","store/states/index.ts","store/reducer/user.reducer.ts","store/saga/user.saga.ts","store/saga/index.ts","store/index.ts","contexts/JsonRpcContext.tsx","assets/images/logo.png","assets/images/promo_image_1.svg","assets/images/promo_image_2.svg","assets/images/promo_image_3.svg","utils/i18utils.tsx","index.tsx","pages/error.tsx","config/appconfig.tsx","services/user.service.ts"],"names":["ENS","require","default","getEnsAddress","provider","ethers","JsonRpcProvider","ethereumRpcUrl","web3","Web3","ens","ensAddress","getPublicKeysFromAccounts","accounts","filter","account","startsWith","reduce","map","address","split","pop","Error","PublicKey","getSupportedMethodsByNamespace","namespace","values","Object","DEFAULT_EIP155_METHODS","console","log","DEFAULT_COSMOS_METHODS","DEFAULT_SOLANA_METHODS","getSupportedEventsByNamespace","DEFAULT_EIP_155_EVENTS","DEFAULT_COSMOS_EVENTS","DEFAULT_SOLANA_EVENTS","getRequiredNamespaces","chains","selectedNamespaces","supportedNamespaces","forEach","chainId","includes","push","getNamespacesFromChains","fromEntries","methods","chain","events","SIGNATURE_PREFIX","NDJ_ADDRESS","ClientContext","createContext","WalletConnectProvider","children","useState","client","setClient","pairings","setPairings","session","setSession","dispatch","useDispatch","qrCodeUri","setQRCodeUri","initialized","setInitialized","setIsFetchingBalances","isInitializing","setIsInitializing","isLoading","setIsLoading","setAccount","setAccounts","solanaPublicKeys","setSolanaPublicKeys","DEFAULT_CHAINS","setChains","balances","setBalances","isMerchantUser","merchantExists","merchantLogin","setMerchantLogin","pathname","useLocation","reset","info","undefined","i","localStorage","length","key","removeItem","getAccountBalances","_accounts","Promise","all","reference","currentRpcApi","getAccountBalance","assets","symbol","balance","arr","error","onSessionConnected","useCallback","_session","allNamespaceAccounts","namespaces","flat","allNamespaceChains","keys","loginWithAccount","loginWithSignedNonce","login","signNonce","nonce","message","hexMsg","encoding","params","request","topic","method","PERSONAL_SIGN","signature","setItem","useEffect","getItem","availableAccounts","a","toast","disconnect","startTime","moment","duration","diff","asSeconds","waitTime","sleep","userAction","loginSuccess","UserService","loginApi","loginRes","data","warn","nonceApi","res","axios","setAuthorizationToken","setNonce","merchantLoginSuccess","connect","pairing","requiredNamespaces","connectParams","pairingTopic","uri","approval","getAll","active","reason","getSdkError","refreshBalances","switchAccount","_account","_subscribeToEvents","_client","on","args","get","updatedSession","_checkPersistedState","lastKeyIndex","createClient","Client","init","relayUrl","DEFAULT_RELAY_URL","projectId","DEFAULT_PROJECT_ID","metadata","getAppMetadata","DEFAULT_APP_METADATA","then","value","debug","catch","e","useMemo","Provider","useWalletConnectClient","context","useContext","ellipseAddress","width","slice","sanitizeDecimals","decimals","integer","fractional","_fractional","substring","replace","join","toWad","amount","utils","parseUnits","LOCALSTORAGE_KEY_TESTNET","getLocalStorageTestnetFlag","persisted","window","setLocaleStorageTestnetFlag","ethereumApi","create","baseURL","timeout","headers","Accept","ethChainId","response","result","apiGetAccountTransactions","apiGetAccountNonce","apiGetGasPrices","ethInstance","polygonInstance","polygonRpcUrl","infuraGetPolygonAccountBalance","infuraGetEthAccountBalance","post","assetData","name","contractAddress","infuraGetTransactionByHash","hash","infuraGetAccountNonce","infuraGetGasPrices","InfuraApi","infuraGetAccountBalance","resolve","EthereumXyzApi","apiGetAccountBalance","gasPrices","slow","price","toHexString","RpcSourceAdapter","infuraRpcApi","ethereumXyzRpcApi","this","getAccountNonce","getGasPrices","getAccountTransactions","getGasPrice","generateTransaction","sendAmount","orderTrackingId","toAddress","_nonce","_gasPrice","gasPrice","encodeNumberAsHex","Number","gasLimit","_value","toString","tx","from","to","hex3","numberToHex","getNonZeroAccountBalance","balanceString","firstNonZeroAccount","accountBalance","BigNumber","accountBalanceUSD","balanceToken","accountBalances","balanceElement","gt","formatEther","token","balanceUsd","userActionTypes","EUserActionTypes","isTestnetMode","APP_URL","description","url","icons","ms","setTimeout","getConnectionStatusDisplay","getConnectionNetwork","chainData","getDisplayName","ensName","chainMeta","currency","bep20","id","rpc","slip44","testnet","logo","rgb","solana","eip155","Landing","className","defaults","apiBaseUrl","isDevMode","common","interceptors","use","err","code","AxiosService","AuthorizationToken","Nonce","addHeaders","userConfig","globalHeaders","endPoint","includeHeaders","put","patch","del","delete","getNonce","getSignature","payload","type","LOGIN_SUCCESS","getAccountInfoSuccess","GET_USER_INFO_SUCCESS","getMerchantInfoSuccess","GET_MERCHANT_INFO_SUCCESS","getOrderSuccess","externalOrderId","trackingId","GET_ORDER_SUCCESS","getEnsNameSuccess","GET_ENS_NAME_SUCCESS","getTickersSuccess","GET_PRICE_TICKERS_SUCCESS","setTransactionInProgress","SET_TRANSACTION_IN_PROGRESS","setTransactionInfoWallet","transactionHash","transaction","SET_TRANSACTION_INFO","setCreateTransaction","SET_CREATE_TRANSACTION","unsetTransaction","UNSET_TRANSACTION","setCreateTransactionSuccess","SET_TRANSACTION_SUCCESS","setCreateOrderSuccess","CREATE_ORDER_SUCCESS","setOrderTransactionHash","SET_ORDER_TRANSACTION_HASH","createOrder","CREATE_ORDER","getOrder","GET_ORDER","GET_MERCHANT_INFO","createMerchant","history","CREATE_MERCHANT","merchant","setCreateMerchantSuccess","merchantName","memberAddress","CREATE_MERCHANT_SUCCESS","TransactionState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","handlers","userState","isLogged","loading","tickers","transactionInfo","transactionInProgress","INITIAL","accountInfo","transactionData","userInfo","order","rootState","userReducer","state","produce","draft","setMerchantInfo","setOrderData","action","hasOwnProperty","merchantInfo","rootReducer","combineReducers","root","watchGetEnsName","watchGetMerchantInfo","watchGetOrderInfo","watchCreateNewOrder","watchLinkOrderTransaction","watchGetTickers","watchCreateTransactions","watchUnsetTransaction","watchCreateMerchant","takeLatest","LOGIN_REQUEST","getName","getAddress","call","getMerchantInfoApi","getOrderApi","createNewOrder","status","linkOrderTransaction","nativeAmount","getTickersApi","transactionOrder","createNewMerchant","fork","userSaga","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","rootSaga","configStore","JsonRpcContext","JsonRpcContextProvider","pending","setPending","setResult","isTestnet","setIsTestnet","_createJsonRpcRequestHandler","rpcRequest","trx","errorResult","valid","_verifyEip155MessageSignature","verifyMessage","toLowerCase","ping","ethereumRpc","testSendTransaction","caipAccountAddress","find","gasPriceBigN","gasLimitBigN","totalGasFees","mul","lt","ETH_SEND_TRANSACTION","transactionCost","transactionCostBigN","add","testSignTransaction","ETH_SIGN_TRANSACTION","signedTx","EthTransaction","fromSerializedTx","verifySignature","rpcResult","testSignPersonalMessage","Date","now","testEthSign","ETH_SIGN","isRpcRequestPending","resources","en","special","es","i18next","initReactI18next","LanguageDetector","fallbackLng","ns","Main","React","lazy","module","ReactDOM","render","fallback","path","component","src","logoIcon","alt","promo1","promo2","promo3","toastClassName","bodyClassName","autoClose","icon","position","hideProgressBar","closeOnClick","document","getElementById","BUILD_CONFIG","getMeApi"],"mappings":"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","file":"static/js/main.6724b0d9.chunk.js","sourcesContent":["import Web3 from 'web3';\nimport * as ethers from 'ethers';\nimport {ethereumRpcUrl} from \"../config/appconfig\";\nconst ENS = require('@ensdomains/ensjs').default;\nconst getEnsAddress = require('@ensdomains/ensjs').getEnsAddress;\n\nconst provider = new ethers.providers.JsonRpcProvider(ethereumRpcUrl);\nexport const web3 = new Web3(ethereumRpcUrl);\nexport const ens = new ENS({ provider, ensAddress: getEnsAddress('1') });\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport function getPublicKeysFromAccounts(accounts: string[]) {\n  return (\n    accounts\n      // Filter out any non-solana accounts.\n      .filter(account => account.startsWith(\"solana:\"))\n      // Create a map of Solana address -> publicKey.\n      .reduce((map: Record<string, PublicKey>, account) => {\n        const address = account.split(\":\").pop();\n        if (!address) {\n          throw new Error(`Could not derive Solana address from CAIP account: ${account}`);\n        }\n        map[address] = new PublicKey(address);\n        return map;\n      }, {})\n  );\n}\n","import { ProposalTypes } from \"@walletconnect/types\";\nimport {\n    DEFAULT_COSMOS_EVENTS,\n    DEFAULT_COSMOS_METHODS,\n    DEFAULT_EIP155_METHODS,\n    DEFAULT_EIP_155_EVENTS,\n    DEFAULT_SOLANA_EVENTS,\n    DEFAULT_SOLANA_METHODS,\n} from \"../consts\";\n\nexport const getNamespacesFromChains = (chains: string[]) => {\n    const supportedNamespaces: string[] = [];\n    chains.forEach(chainId => {\n        const [namespace] = chainId.split(\":\");\n        if (!supportedNamespaces.includes(namespace)) {\n            supportedNamespaces.push(namespace);\n        }\n    });\n\n    return supportedNamespaces;\n};\n\nexport const getSupportedMethodsByNamespace = (namespace: string) => {\n    switch (namespace) {\n        case \"eip155\":{\n            let values = Object.values(DEFAULT_EIP155_METHODS);\n            console.log(`selected methods ${values} for namespace: ${namespace}` );\n            return values;\n        }\n        case \"cosmos\":\n            return Object.values(DEFAULT_COSMOS_METHODS);\n        case \"solana\":\n            return Object.values(DEFAULT_SOLANA_METHODS);\n        default:\n            throw new Error(`No default methods for namespace: ${namespace}`);\n    }\n};\n\nexport const getSupportedEventsByNamespace = (namespace: string) => {\n    switch (namespace) {\n        case \"eip155\":\n            return Object.values(DEFAULT_EIP_155_EVENTS);\n        case \"cosmos\":\n            return Object.values(DEFAULT_COSMOS_EVENTS);\n        case \"solana\":\n            return Object.values(DEFAULT_SOLANA_EVENTS);\n        default:\n            throw new Error(`No default events for namespace: ${namespace}`);\n    }\n};\n\nexport const getRequiredNamespaces = (chains: string[]): ProposalTypes.RequiredNamespaces => {\n    const selectedNamespaces = getNamespacesFromChains(chains);\n    console.log(\"selected namespaces:\", selectedNamespaces);\n\n    // for (let item in selectedNamespaces){\n    //     console.log(`\"supported methods for: ${item} ${getSupportedMethodsByNamespace(item)}`);\n    // }\n\n    return Object.fromEntries(\n        selectedNamespaces.map(namespace => [\n            namespace,\n            {\n                methods: getSupportedMethodsByNamespace(namespace),\n                chains: chains.filter(chain => chain.startsWith(namespace)),\n                events: getSupportedEventsByNamespace(namespace) as any[],\n            },\n        ]),\n    );\n};\n","import Client from '@walletconnect/sign-client';\nimport {PairingTypes, SessionTypes} from '@walletconnect/types';\nimport {createContext, ReactNode, useCallback, useContext, useEffect, useMemo, useState} from 'react';\nimport {PublicKey} from '@solana/web3.js';\nimport moment from 'moment';\nimport * as encoding from '@walletconnect/encoding';\n\nimport {\n  DEFAULT_APP_METADATA, DEFAULT_CHAINS,\n  DEFAULT_EIP155_METHODS,\n  DEFAULT_PROJECT_ID,\n  DEFAULT_RELAY_URL,\n} from '../consts';\nimport {getAppMetadata, getSdkError} from \"@walletconnect/utils\";\nimport {getPublicKeysFromAccounts} from '../helpers/solana';\nimport {useDispatch} from 'react-redux';\nimport {userAction} from '../store/actions';\nimport {sleep} from '../utils';\nimport {toast} from 'react-toastify';\nimport {AccountBalances} from \"../helpers\";\nimport {getRequiredNamespaces} from \"../helpers/namespaces\";\nimport {currentRpcApi} from \"../helpers/tx\";\nimport {UserService} from \"../services\";\nimport axios from \"../services/axios\";\nimport {useLocation} from \"react-use\";\n\nconst loadingTimeout = 5; // seconds\nconst SIGNATURE_PREFIX = 'NDJ_SIGNATURE_V2_';\nconst NDJ_ADDRESS = 'NDJ_ADDRESS_V2';\n\n/**\n * Types\n */\ninterface IContext {\n  initialized: boolean;\n  qrCodeUri: string | undefined;\n  client: Client | undefined;\n  session: SessionTypes.Struct | undefined;\n  connect: (pairing?: { topic: string }) => Promise<void>;\n  disconnect: () => Promise<void>;\n  refreshBalances: (accounts: string[]) => Promise<void>;\n  switchAccount: (account: string) => Promise<void>;\n  isInitializing: boolean;\n  chains: string[];\n  pairings: PairingTypes.Struct[];\n  isLoading: boolean;\n  account: string | undefined;\n  accounts: string[];\n  solanaPublicKeys?: Record<string, PublicKey>;\n  balances: AccountBalances;\n  setChains: any;\n  merchantLogin: MerchantLoginStatus;\n}\n\nexport interface MerchantLoginStatus {\n  isMerchantUser: boolean;\n  merchantExists: boolean;\n}\n\n/**\n * Context\n */\nexport const ClientContext = createContext<IContext>({} as IContext);\n\n/**\n * Provider\n */\nexport function WalletConnectProvider({ children }: { children: ReactNode | ReactNode[] }) {\n  const [client, setClient] = useState<Client>();\n  const [pairings, setPairings] = useState<PairingTypes.Struct[]>([]);\n  const [session, setSession] = useState<SessionTypes.Struct>();\n  const dispatch = useDispatch();\n\n  const [qrCodeUri, setQRCodeUri] = useState<string>();\n  const [initialized, setInitialized] = useState(false);\n  const [isFetchingBalances, setIsFetchingBalances] = useState(false);\n  const [isInitializing, setIsInitializing] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [account, setAccount] = useState<string>();\n  const [accounts, setAccounts] = useState<string[]>([]);\n  const [solanaPublicKeys, setSolanaPublicKeys] = useState<Record<string, PublicKey>>();\n  const [chains, setChains] = useState<string[]>(DEFAULT_CHAINS);\n\n  const [balances, setBalances] = useState<AccountBalances>({});\n\n  const [merchantLogin, setMerchantLogin] = useState<MerchantLoginStatus>({isMerchantUser: false, merchantExists: false});\n\n  let pathname = useLocation().pathname;\n\n  const reset = () => {\n    console.info(`resetting balances`);\n    setPairings([]);\n    setQRCodeUri(undefined);\n    setBalances({});\n    setSession(undefined);\n    setAccount(undefined);\n    setAccounts([]);\n    setChains([]);\n\n    for (var i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.includes(SIGNATURE_PREFIX)) {\n        localStorage.removeItem(key);\n      }\n    }\n    localStorage.removeItem(NDJ_ADDRESS);\n  };\n\n  const getAccountBalances = async (_accounts: string[]) => {\n    console.info(`getting account balances`)\n    setIsFetchingBalances(true);\n    try {\n\n      const arr = await Promise.all(\n          _accounts.map(async account => {\n            const [namespace, reference, address] = account.split(\":\");\n            const chainId = `${namespace}:${reference}`;\n            const assets = await currentRpcApi.getAccountBalance(address, chainId);\n            console.info(`account balance for chainId:${chainId} address:${address} \\n\n              --> balance = ${assets.symbol} ${assets.balance}`);\n            return { account, assets: [assets] };\n          }),\n      );\n\n      const balances: AccountBalances = {};\n      arr.forEach(({ account, assets }) => {\n        balances[account] = assets;\n      });\n      setBalances(balances);\n    } catch (e) {\n      console.error(`caught error while refreshing balances: ${e}`);\n    } finally {\n      setIsFetchingBalances(false);\n    }\n  };\n\n  const onSessionConnected = useCallback(async (_session: SessionTypes.Struct) => {\n    const allNamespaceAccounts = Object.values(_session.namespaces)\n        .map(namespace => namespace.accounts)\n        .flat();\n    const allNamespaceChains = Object.keys(_session.namespaces);\n    setSession(_session);\n    setChains(allNamespaceChains);\n    setAccounts(allNamespaceAccounts);\n    setSolanaPublicKeys(getPublicKeysFromAccounts(allNamespaceAccounts));\n    await getAccountBalances(allNamespaceAccounts);\n  }, []);\n\n\n  useEffect(() => {\n    if (!pathname) {\n      return;\n    }\n    if (pathname.startsWith('/storefront/merchant')) {\n      merchantLogin.isMerchantUser = true\n    } else {\n      merchantLogin.isMerchantUser = false\n    }\n    setMerchantLogin(merchantLogin);\n\n  }, [pathname]);\n\n  function loginWithAccount(account: string, merchantLogin: MerchantLoginStatus) {\n    if (!merchantLogin.isMerchantUser) {\n      login(account);\n    } else {\n      loginWithSignedNonce(account);\n    }\n  }\n\n  useEffect(() => {\n    if (!accounts.length) {\n      return;\n    }\n\n    const account = localStorage.getItem(NDJ_ADDRESS);\n    if (!accounts.length) {\n      return;\n    }\n    const availableAccounts = accounts.filter(a => !a.startsWith('solana'));\n\n    if (account && availableAccounts.includes(account)) {\n      loginWithAccount(account, merchantLogin);\n    } else if (availableAccounts[0]) {\n      loginWithAccount(availableAccounts[0], merchantLogin);\n    } else {\n      toast.error('No available accounts');\n      disconnect();\n    }\n  }, [accounts, merchantLogin]);\n\n  async function signNonce(account: string, nonce: string) {\n    const [namespace, reference, address] = account.split(':');\n    const message = nonce;\n    const hexMsg = encoding.utf8ToHex(message, true);\n\n    // personal_sign params\n    const params = [hexMsg, address];\n    // send message\n    const signature = await client?.request<string>({\n      topic: session!.topic,\n      chainId: `${namespace}:${reference}`,\n      request: {\n        method: DEFAULT_EIP155_METHODS.PERSONAL_SIGN,\n        params,\n      },\n    });\n\n    if (signature) {\n      localStorage.setItem(`${SIGNATURE_PREFIX}_${account}`, signature);\n    }\n    //TODO else\n    return signature;\n  }\n\n  const login = useCallback(\n    async (account: string) => {\n      try {\n        setIsLoading(true);\n        const startTime = moment();\n\n        const [namespace, reference, address] = account.split(':');\n\n        const duration = moment.duration(moment().diff(startTime)).asSeconds();\n        const waitTime = loadingTimeout - duration;\n\n        if (waitTime > 0) {\n          await sleep(waitTime * 1000);\n        }\n\n        setAccount(account);\n        localStorage.setItem(NDJ_ADDRESS, account);\n\n        dispatch(userAction.loginSuccess({ address: address, namespace: namespace, reference: reference}));\n\n      } catch (err: any) {\n        localStorage.removeItem(`${SIGNATURE_PREFIX}_${account}`);\n        toast.error(err.message);\n        console.error(`login exception: ${err} ${err?.message}. Disconnecting...`)\n        disconnect();\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [client, session]\n  );\n\n  //TODO this should be used when we access the merchant app, as opposed to one step login when using the purchase app with no signature\n  const loginWithSignedNonce = useCallback(\n      async (account: string) => {\n        try {\n          setIsLoading(true);\n          const startTime = moment();\n\n          const [namespace, reference, address] = account.split(':');\n\n          try {\n            const loginRes = await UserService.loginApi(address);\n            const memberNonce = loginRes.data.nonce;\n            if (!memberNonce) {\n              console.warn(\"not a member\")\n              merchantLogin.merchantExists = false\n            } else {\n              console.warn(\"merchant does exist a member\")\n              merchantLogin.merchantExists = true\n            }\n            setMerchantLogin(merchantLogin)\n          } catch (e) {\n            console.log(e)\n          }\n\n\n          const res = await UserService.nonceApi(address);\n          let nonce = res.data.nonce;\n\n          if (!nonce) {\n            console.warn(`registration nonce is not valid. exit`)\n            throw new Error(res.data.message);\n          }\n\n          let signature: string | null = localStorage.getItem(`${SIGNATURE_PREFIX}_${account}`) as string;\n          if (!signature) {\n            signature = await signNonce(account, nonce) || null;\n          }\n\n          if (signature) {\n            axios.setAuthorizationToken(signature);\n            axios.setNonce(nonce);\n          } else {\n            toast(\"Invalid signature\")\n          }\n\n          const duration = moment.duration(moment().diff(startTime)).asSeconds();\n          const waitTime = loadingTimeout - duration;\n\n          if (waitTime > 0) {\n            await sleep(waitTime * 1000);\n          }\n\n          setAccount(account);\n          localStorage.setItem(NDJ_ADDRESS, account);\n\n          dispatch(userAction.loginSuccess({ address: address, namespace: namespace, reference: reference}));\n          dispatch(userAction.merchantLoginSuccess({address: address}));\n\n\n\n        } catch (err: any) {\n          localStorage.removeItem(`${SIGNATURE_PREFIX}_${account}`);\n          console.error(`loginWithSignedNonce exception: ${err} ${err?.message}`)\n          toast.error(`Error: ${err.message}.`);\n\n          //TODO check if disconnect or not\n          // disconnect().then(() => console.log(`disconnect done.`));\n        } finally {\n          setIsLoading(false);\n        }\n      },\n      [client, session, merchantLogin]\n  );\n\n  const connect = useCallback(\n    async pairing => {\n      try {\n        console.log(\"connecting...\");\n        if (typeof client === 'undefined') {\n          throw new Error('WalletConnect is not initialized');\n        }\n        console.log(\"connect, pairing topic is:\", pairing?.topic);\n        const requiredNamespaces = getRequiredNamespaces(chains);\n        console.log(\"requiredNamespaces config for connect:\", requiredNamespaces);\n\n        let connectParams = {\n          pairingTopic: pairing?.topic,\n          requiredNamespaces,\n        };\n        const { uri, approval } = await client.connect(connectParams);\n\n        // Open QRCode modal if a URI was returned (i.e. we're not connecting an existing pairing).\n        if (uri) {\n          setQRCodeUri(uri);\n        }\n\n        const session = await approval();\n        console.log(\"Established session:\", session);\n        await onSessionConnected(session);\n        // Update known pairings after session is connected.\n        setPairings(client.pairing.getAll({ active: true }));\n      } catch (e: any) {\n        toast.error(`connect error: ${e?.message || \"\"}`);\n      } finally {\n        // close modal in case it was open\n      }\n    },\n    [chains, client, onSessionConnected]\n  );\n\n  const disconnect = useCallback(async () => {\n    try {\n      if (typeof client === 'undefined') {\n        throw new Error('WalletConnect is not initialized');\n      }\n      if (typeof session === 'undefined') {\n        throw new Error('Session is not connected');\n      }\n      await client.disconnect({\n        topic: session.topic,\n        reason: getSdkError(\"USER_DISCONNECTED\"),\n      });\n      // Reset app state after disconnect.\n      reset();\n    } catch (err: any) {\n      console.log(`disconnect error ${err?.message}`)\n      //toast.error(err.message);\n    }\n  }, [client, session]);\n\n  const refreshBalances = useCallback(\n      async (_accounts: string[]) => {\n        try {\n          if (!client) {\n            throw new Error('WalletConnect is not initialized');\n          }\n          if (!session) {\n            throw new Error('Session is not connected');\n          }\n          await getAccountBalances(_accounts);\n        } catch (err: any) {\n          toast.error(`caught error while refreshing balances: ${err.message}`);\n        }\n      },\n      [client, session]\n  );\n\n  const switchAccount = useCallback(\n    async (_account: string) => {\n      try {\n        setAccount(undefined);\n        if (!client) {\n          throw new Error('WalletConnect is not initialized');\n        }\n\n        if (!session) {\n          throw new Error('Session is not connected');\n        }\n        console.log('_account', _account);\n        login(_account);\n      } catch (err: any) {\n        toast.error(err.message);\n      }\n    },\n    [client, session]\n  );\n\n  const _subscribeToEvents = useCallback(\n    async (_client: Client) => {\n      if (typeof _client === 'undefined') {\n        return toast.error('WalletConnect is not initialized');\n      }\n      _client.on(\"session_ping\", args => {\n        console.log(\"EVENT\", \"session_ping\", args);\n      });\n\n      _client.on(\"session_ping\", args => {\n        console.warn(`**** session_ping event. args: ${args}`);\n      });\n\n      _client.on(\"session_event\", args => {\n        console.log(\"EVENT\", \"session_event\", args);\n      });\n\n      _client.on(\"session_update\", ({ topic, params }) => {\n        console.log(\"EVENT\", \"session_update\", { topic, params });\n        const { namespaces } = params;\n        const _session = _client.session.get(topic);\n        const updatedSession = { ..._session, namespaces };\n        onSessionConnected(updatedSession);\n      });\n\n      _client.on(\"session_delete\", () => {\n        console.log(\"EVENT\", \"session_delete\");\n        reset();\n      });\n    },\n    [onSessionConnected]\n  );\n\n\n  const _checkPersistedState = useCallback(\n    async (_client: Client) => {\n      if (typeof _client === 'undefined') {\n        return toast.error('WalletConnect is not initialized');\n      }\n      // populates existing pairings to state\n      setPairings(_client.pairing.values);\n      console.log(\"RESTORED PAIRINGS: \", _client.pairing.values);\n\n\n      if (typeof session !== 'undefined') return;\n      // populates (the last) existing session to state\n      if (_client.session.length) {\n        const lastKeyIndex = _client.session.keys.length - 1;\n        const _session = _client.session.get(_client.session.keys[lastKeyIndex]);\n        console.log(\"RESTORED SESSION:\", _session);\n        await onSessionConnected(_session);\n        return _session;\n      }\n    },\n    [session, onSessionConnected]\n  );\n\n  const createClient = useCallback(async () => {\n    try {\n      setIsInitializing(true);\n\n      const _client = await Client.init({\n        // logger: DEFAULT_LOGGER,\n        relayUrl: DEFAULT_RELAY_URL,\n        projectId: DEFAULT_PROJECT_ID,\n        metadata: getAppMetadata() || DEFAULT_APP_METADATA,\n      });\n      console.log(\"CREATED CLIENT: \", _client);\n      setClient(_client);\n      await _subscribeToEvents(_client);\n      await _checkPersistedState(_client);\n      setInitialized(true);\n    } catch (err) {\n      throw err;\n    } finally {\n      setIsInitializing(false);\n    }\n  }, [_checkPersistedState, _subscribeToEvents]);\n\n  useEffect(() => {\n    if (!client) {\n      try {\n        createClient().then(value => {\n          console.debug(`client created ok: ${value}`)\n        }).catch(reason => {\n          console.error(`client creation failed: reason: ${reason}`)\n        });\n      } catch (e) {\n        console.error(`client creation failed: ${e}`)\n      }\n    }\n  }, [client, createClient]);\n\n  const value = useMemo(\n    () => ({\n      pairings,\n      isInitializing,\n      initialized,\n      qrCodeUri,\n      isLoading,\n      account,\n      accounts,\n      balances,\n      solanaPublicKeys,\n      chains,\n      client,\n      session,\n      connect,\n      disconnect,\n      refreshBalances,\n      setChains,\n      switchAccount,\n      merchantLogin,\n    }),\n    [\n      pairings,\n      isInitializing,\n      isLoading,\n      initialized,\n      qrCodeUri,\n      account,\n      accounts,\n      balances,\n      solanaPublicKeys,\n      chains,\n      client,\n      session,\n      connect,\n      disconnect,\n      refreshBalances,\n      setChains,\n      switchAccount,\n      merchantLogin\n    ]\n  );\n\n  return (\n    <ClientContext.Provider\n      value={{\n        ...value,\n      }}\n    >\n      {children}\n    </ClientContext.Provider>\n  );\n}\n\nexport function useWalletConnectClient() {\n  const context = useContext(ClientContext);\n  if (context === undefined) {\n    toast.error('useWalletConnectClient must be used within a WalletConnectProvider');\n  }\n  return context;\n}\n","import {BigNumber, BigNumberish, utils} from 'ethers';\nimport * as encoding from '@walletconnect/encoding';\nimport {TypedDataUtils} from 'eth-sig-util';\nimport * as ethUtil from 'ethereumjs-util';\n\nimport {DEFAULT_CHAINS} from '../consts';\n\nexport function capitalize(string: string): string {\n  return string\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n}\n\nexport function ellipseText(text = '', maxLength = 9999): string {\n  if (text.length <= maxLength) {\n    return text;\n  }\n  const _maxLength = maxLength - 3;\n  let ellipse = false;\n  let currentLength = 0;\n  const result =\n    text\n      .split(' ')\n      .filter(word => {\n        currentLength += word.length;\n        if (ellipse || currentLength >= _maxLength) {\n          ellipse = true;\n          return false;\n        } else {\n          return true;\n        }\n      })\n      .join(' ') + '...';\n  return result;\n}\n\nexport function ellipseAddress(address = '', width = 10): string {\n  return `${address.slice(0, width)}...${address.slice(-width)}`;\n}\n\nexport function getDataString(func: string, arrVals: any[]): string {\n  let val = '';\n  for (let i = 0; i < arrVals.length; i++) {\n    val += encoding.padLeft(arrVals[i], 64);\n  }\n  const data = func + val;\n  return data;\n}\n\nexport function isMobile(): boolean {\n  let mobile = false;\n\n  function hasTouchEvent(): boolean {\n    try {\n      document.createEvent('TouchEvent');\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function hasMobileUserAgent(): boolean {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(\n        navigator.userAgent\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        navigator.userAgent.substr(0, 4)\n      )\n    ) {\n      return true;\n    } else if (hasTouchEvent()) {\n      return true;\n    }\n    return false;\n  }\n\n  mobile = hasMobileUserAgent();\n\n  return mobile;\n}\n\nexport function encodePersonalMessage(msg: string): string {\n  const data = encoding.utf8ToBuffer(msg);\n  const buf = Buffer.concat([Buffer.from('\\u0019Ethereum Signed Message:\\n' + data.length.toString(), 'utf8'), data]);\n  return ethUtil.bufferToHex(buf);\n}\n\nexport function hashPersonalMessage(msg: string): string {\n  const data = encodePersonalMessage(msg);\n  const buf = ethUtil.toBuffer(data);\n  const hash = ethUtil.keccak256(buf);\n  return ethUtil.bufferToHex(hash);\n}\n\nexport function encodeTypedDataMessage(msg: string): string {\n  const data = TypedDataUtils.sanitizeData(JSON.parse(msg));\n  const buf = Buffer.concat([\n    Buffer.from('1901', 'hex'),\n    TypedDataUtils.hashStruct('EIP712Domain', data.domain, data.types),\n    TypedDataUtils.hashStruct(data.primaryType as string, data.message, data.types),\n  ]);\n  return ethUtil.bufferToHex(buf);\n}\n\nexport function hashTypedDataMessage(msg: string): string {\n  const data = encodeTypedDataMessage(msg);\n  const buf = ethUtil.toBuffer(data);\n  const hash = ethUtil.keccak256(buf);\n  return ethUtil.bufferToHex(hash);\n}\n\nexport function recoverAddress(sig: string, hash: string): string {\n  const params = ethUtil.fromRpcSig(sig);\n  const result = ethUtil.ecrecover(ethUtil.toBuffer(hash), params.v, params.r, params.s);\n  const signer = ethUtil.bufferToHex(ethUtil.publicToAddress(result));\n  return signer;\n}\n\nexport function recoverPersonalSignature(sig: string, msg: string): string {\n  const hash = hashPersonalMessage(msg);\n  const signer = recoverAddress(sig, hash);\n  return signer;\n}\n\nexport function recoverTypedMessage(sig: string, msg: string): string {\n  const hash = hashTypedDataMessage(msg);\n  const signer = recoverAddress(sig, hash);\n  return signer;\n}\n\nexport function convertHexToNumber(hex: string) {\n  try {\n    return encoding.hexToNumber(hex);\n  } catch (e) {\n    return 0;\n  }\n}\n\nexport function convertHexToUtf8(hex: string) {\n  try {\n    return encoding.hexToUtf8(hex);\n  } catch (e) {\n    return hex;\n  }\n}\n\nexport const sanitizeDecimals = (value: string, decimals = 18): string => {\n  const [integer, fractional] = value.split('.');\n  const _fractional = fractional ? fractional.substring(0, decimals).replace(/0+$/gi, '') : undefined;\n  return _fractional ? [integer, _fractional].join('.') : integer;\n};\n\nexport const toWad = (amount: string, decimals = 18): BigNumber => {\n  return utils.parseUnits(sanitizeDecimals(amount, decimals), decimals);\n};\n\nexport const fromWad = (wad: BigNumberish, decimals = 18): string => {\n  return sanitizeDecimals(utils.formatUnits(wad, decimals), decimals);\n};\n\nexport const LOCALSTORAGE_KEY_TESTNET = 'TESTNET';\nexport const INITIAL_STATE_TESTNET_DEFAULT = true;\n\nexport function setLocaleStorageTestnetFlag(value: boolean): void {\n  window.localStorage.setItem(LOCALSTORAGE_KEY_TESTNET, `${value}`);\n}\n\nexport function getLocalStorageTestnetFlag(): boolean {\n  let value = INITIAL_STATE_TESTNET_DEFAULT;\n  const persisted = window.localStorage.getItem(LOCALSTORAGE_KEY_TESTNET);\n  if (!persisted) {\n    console.debug(`saving TESTNET ${value} flag to local storage`)\n    setLocaleStorageTestnetFlag(value);\n  } else {\n    value = persisted === 'true';\n  }\n\n  return value;\n}\n\nexport const getAllChainNamespaces = () => {\n  const namespaces: string[] = [];\n  DEFAULT_CHAINS.forEach(chainId => {\n    const [namespace] = chainId.split(':');\n    if (!namespaces.includes(namespace)) {\n      namespaces.push(namespace);\n    }\n  });\n  return namespaces;\n};\n","import axios, { AxiosInstance } from \"axios\";\nimport { AssetData, GasPrices, ParsedTx } from \"../helpers/types\";\n\n// FIXME this should be done via the rpc provider to avoid using this hard-coded nodes, that result in 429 errors\n// https://github.com/pedrouid/ethereum-api\n// It doesn't support Ethereum KOVAN\nconst ethereumApi: AxiosInstance = axios.create({\n    baseURL: \"https://ethereum-api.xyz\",\n    timeout: 30000, // 30 secs\n    headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n    },\n});\n\n// async function apiGetAccountAssets(address: string, chainId: string): Promise<AssetData[]> {\n//     const ethChainId = chainId.split(\":\")[1];\n//     const response = await ethereumApi.get(\n//         `/account-assets?address=${address}&chainId=${ethChainId}`,\n//     );\n//     const { result } = response.data;\n//     return result;\n// }\n\nexport async function apiGetAccountBalance(address: string, chainId: string): Promise<AssetData> {\n    const ethChainId = chainId.split(\":\")[1];\n    const response = await ethereumApi.get(\n        `/account-balance?address=${address}&chainId=${ethChainId}`,\n    );\n    const { result } = response.data;\n    return result;\n}\n\nexport async function apiGetAccountTransactions(\n    address: string,\n    chainId: string,\n): Promise<ParsedTx[]> {\n    const ethChainId = chainId.split(\":\")[1];\n    const response = await ethereumApi.get(\n        `/account-transactions?address=${address}&chainId=${ethChainId}`,\n    );\n    const { result } = response.data;\n    return result;\n}\n\nexport const apiGetAccountNonce = async (address: string, chainId: string): Promise<number> => {\n    const ethChainId = chainId.split(\":\")[1];\n    const response = await ethereumApi.get(`/account-nonce?address=${address}&chainId=${ethChainId}`);\n    const { result } = response.data;\n    return result;\n};\n\n//FIXME no chain id, only for ethereum ??\nexport const apiGetGasPrices = async (chainId: string): Promise<GasPrices> => {\n    const ethChainId = chainId.split(\":\")[1];\n    console.info(`apiGetGasPrices for chainId: ${chainId} ethChainId: ${ethChainId}`);\n    const response = await ethereumApi.get(`/gas-prices?chainId=${ethChainId}`);\n    const { result } = response.data;\n    return result;\n};\n","import axios, {AxiosInstance} from \"axios\";\nimport {AssetData, TxDetails} from \"../helpers/types\";\nimport {ethereumRpcUrl, polygonRpcUrl} from \"../config/appconfig\";\n\nconst ethInstance: AxiosInstance = axios.create({\n    baseURL: ethereumRpcUrl,\n    timeout: 30000, // 30 secs\n    headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n    },\n});\n\nconst polygonInstance: AxiosInstance = axios.create({\n    baseURL: polygonRpcUrl,\n    timeout: 30000, // 30 secs\n    headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n    },\n});\n\nexport async function infuraGetAccountBalance(address: string, chainId: string): Promise<AssetData> {\n    const data = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"eth_getBalance\",\n        \"params\": [address, \"latest\"],\n        \"id\": 1\n    };\n    if (chainId.includes(\"80001\")) {\n        return infuraGetPolygonAccountBalance(data);\n    }\n    return infuraGetEthAccountBalance(data);\n}\n\nasync function infuraGetEthAccountBalance(data: any): Promise<AssetData> {\n    const response = await ethInstance.post(\n        \"\",\n        data\n    );\n    const { result } = response.data;\n    const assetData = {\n        symbol: \"ETH\",\n        name: \"Ether\",\n        decimals: \"18\",\n        contractAddress: \"\",\n        balance: result\n    }\n    return assetData;\n}\n\nasync function infuraGetPolygonAccountBalance(data: any): Promise<AssetData> {\n    const response = await polygonInstance.post(\n        \"\",\n        data\n    );\n    const { result } = response.data;\n    const assetData = {\n        symbol: \"MATIC\",\n        name: \"Matic\",\n        decimals: \"18\",\n        contractAddress: \"\",\n        balance: result\n    }\n    return assetData;\n}\n\n/**\n * https://docs.infura.io/infura/networks/ethereum/json-rpc-methods/parity_nextnonce\n * @param address\n * @param chainId\n */\nexport const infuraGetAccountTransactions = async (address: string, chainId: string): Promise<number> => {\n    const data = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"eth_getTransactionByHash\",\n        \"params\": [address],\n        \"id\": 1\n    };\n    const response = await ethInstance.post(\n        \"\",\n        data\n    );\n    const { result } = response.data;\n    console.info(`got nonce: ${result}`)\n    return result;\n};\n\nexport const infuraGetTransactionByHash = async (hash: string, chainId: string): Promise<TxDetails> => {\n    const data = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"eth_getTransactionByHash\",\n        \"params\": [hash],\n        \"id\": 1\n    };\n    const response = await ethInstance.post(\n        \"\",\n        data\n    );\n    const { result } = response.data;\n    console.info(`got trx details: ${result}`)\n    return result;\n};\n\n/**\n * https://docs.infura.io/infura/networks/ethereum/json-rpc-methods/parity_nextnonce\n * @param address\n * @param chainId\n */\nexport const infuraGetAccountNonce = async (address: string, chainId: string): Promise<number> => {\n    const data = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"parity_nextNonce\",\n        \"params\": [address],\n        \"id\": 1\n    };\n    const response = await ethInstance.post(\n        \"\",\n        data\n    );\n    const { result } = response.data;\n    console.info(`got nonce: ${result}`)\n    return result;\n};\n\nexport const infuraGetGasPrices = async (chainId: string): Promise<string> => {\n    const data = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"eth_gasPrice\",\n        \"params\": [],\n        \"id\": 1\n    };\n    const response = await ethInstance.post('', data);\n    const { result } = response.data;\n    console.debug(`gas price for chainId ${chainId} response ${result}`);\n    return result;\n};\n","import {AssetData, ParsedTx, TxDetails} from \"../helpers/types\";\nimport {apiGetAccountBalance, apiGetAccountNonce, apiGetAccountTransactions, apiGetGasPrices} from \"./api\";\nimport {\n    infuraGetAccountBalance,\n    infuraGetAccountNonce,\n    infuraGetGasPrices,\n    infuraGetTransactionByHash\n} from \"./infura-api\";\nimport {toWad} from \"../helpers\";\n\nexport interface RpcApi {\n    getAccountBalance(address: string, chainId: string): Promise<AssetData>;\n    getAccountNonce(address: string, chainId: string): Promise<number>;\n    getGasPrices(chainId: string): Promise<string>;\n    getAccountTransactions(address: string, chainId: string): Promise<ParsedTx[]>;\n    getTransactionByHash(address: string, chainId: string): Promise<TxDetails>;\n}\n\nexport class InfuraApi implements RpcApi {\n    getAccountBalance(address: string, chainId: string): Promise<AssetData> {\n        return infuraGetAccountBalance(address, chainId);\n    }\n\n    getAccountNonce(address: string, chainId: string): Promise<number> {\n        return infuraGetAccountNonce(address, chainId);\n    }\n\n    //https://eth.wiki/json-rpc/API\n    //curl 'https://kovan.infura.io/v3/f785cca3f0854d5a9b04078a6e380b09' -X POST -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:101.0) Gecko/20100101 Firefox/101.0' -H 'Accept: application/json' -H 'Accept-Language: en-US,en;q=0.5' -H 'Accept-Encoding: gzip, deflate, br' -H 'Content-Type: application/json' -H 'Origin: http://localhost:3000' -H 'Connection: keep-alive' -H 'Referer: http://localhost:3000/' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: cross-site' -H 'Sec-GPC: 1' -H 'TE: trailers' --data-raw '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBalance\",\"params\":[\"0x778dAac766b448cf0Ea7D9ac9422fC7c0D2e12f2\",\"latest\"],\"id\":1 }'\n    getGasPrices(chainId: string): Promise<string> {\n        return infuraGetGasPrices(chainId);\n    }\n\n    getTransactionByHash(address: string, chainId: string): Promise<TxDetails> {\n        return infuraGetTransactionByHash(address, chainId);\n    }\n\n    getAccountTransactions(address: string, chainId: string): Promise<ParsedTx[]> {\n        return Promise.resolve([]);\n    }\n\n}\n\n/**\n * https://ethereum-api.xyz/supported-chains\n */\nexport class EthereumXyzApi implements RpcApi {\n    getAccountBalance(address: string, chainId: string): Promise<AssetData> {\n        return apiGetAccountBalance(address, chainId);\n    }\n\n    getAccountNonce(address: string, chainId: string): Promise<number> {\n        return apiGetAccountNonce(address, chainId);\n    }\n\n    async getGasPrices(chainId: string): Promise<string> {\n        const gasPrices = await apiGetGasPrices(chainId);\n        console.info(`got gas prices ${gasPrices}`);\n        return toWad(`${gasPrices.slow.price}`, 9).toHexString();\n    }\n\n    async getAccountTransactions(address: string, chainId: string): Promise<ParsedTx[]> {\n        return apiGetAccountTransactions(address, chainId);\n    }\n\n    getTransactionByHash(address: string, chainId: string): Promise<TxDetails> {\n        //\n        throw new Error(\"not impl\");\n    }\n}\n\nexport class RpcSourceAdapter implements RpcApi {\n    infuraRpcApi: RpcApi = new InfuraApi();\n    ethereumXyzRpcApi = new EthereumXyzApi();\n\n    getAccountBalance(address: string, chainId: string): Promise<AssetData> {\n        if (chainId.includes('eip155:80001')) {\n            //EthereumXYZ does not support polygon! ()\n            return this.infuraRpcApi.getAccountBalance(address, chainId);\n        }\n        return this.ethereumXyzRpcApi.getAccountBalance(address, chainId);\n    }\n\n    getAccountNonce(address: string, chainId: string): Promise<number> {\n        // if (chainId.includes('eip155:42')) {\n        //     return this.infuraRpcApi.getAccountNonce(address, chainId);\n        // }\n        return this.ethereumXyzRpcApi.getAccountNonce(address, chainId);\n    }\n\n    async getGasPrices(chainId: string): Promise<string> {\n        // if (chainId.includes('eip155:42')) {\n        //     let gasPrices = this.infuraRpcApi.getGasPrices(chainId);\n        //     return gasPrices;\n        // }\n        return this.ethereumXyzRpcApi.getGasPrices(chainId);\n    }\n\n    getAccountTransactions(address: string, chainId: string): Promise<ParsedTx[]> {\n        return this.ethereumXyzRpcApi.getAccountTransactions(address, chainId);\n    }\n\n    getTransactionByHash(hash: string, chainId: string): Promise<TxDetails> {\n        return infuraGetTransactionByHash(hash, chainId);\n    }\n\n}\n","import * as encoding from \"@walletconnect/encoding\";\nimport {BigNumber, utils} from \"ethers\";\n\nimport {toWad} from \"./utilities\";\nimport {AccountBalances} from \"./types\";\nimport {web3} from \"../utils/walletConnect\";\nimport {RpcApi, RpcSourceAdapter} from \"../rpc/rpc-api\";\n\n\nexport const currentRpcApi: RpcApi = new RpcSourceAdapter();\n\nexport async function getGasPrice(chainId: string): Promise<string> {\n    //TODO wtf hardcoded gas price for ethereum mainnet?\n    //if (chainId === \"eip155:1\") return toWad(\"20\", 9).toHexString();\n    const gasPrices = await currentRpcApi.getGasPrices(chainId);\n    return gasPrices\n}\n\n\nfunction debugTransactionEncodingDecoding(_value: any, value: string) {\n    //TODO this is only debug code\n    const bigN = BigNumber.from(_value.toString())\n    const formatted = utils.formatUnits(bigN, \"ether\")\n    console.info(`transaction value: ${_value} number bigN: ${bigN} formatted: ${formatted} - hex: ${value}`)\n    const val1 = web3.utils.hexToNumber(value);\n    const val2 = web3.utils.toDecimal(value);\n    const val3 = encoding.hexToNumber(value);\n    console.debug(`TRANS decoded value 1:${val1} 2:${val2} 3:${val3}`)\n}\n\n/**\n * See transaction https://explorer.anyblock.tools/ethereum/ethereum/kovan/tx/0x346fd04ddb4a0727e1a7d6ee68c752261eb8ee3c2a5b6f579f7bfcbcbd0ee034/\n * by hash\n *\n * FIXME\n * transaction value: 123500000000000 WEI formatted: 0.0001235 ETH produces problems when converting to hex\n * make tests for it. The hex below doesn't contain the full value but only a small part\n * transaction value: 123500000000000 number bigN: 123500000000000 formatted: 0.0001235 - hex: 95a13800 sanitized: 0x95a13800 tx.ts:64\n * transaction value hex2: 0x705295a13800 hex3: 0x705295a13800 sanitized: 0x705295a13800\n * TRANS decodvalue:2510370816000000000000000000 WEI decimal:2510370816 decoded:2510370816 ETH - f: 0.000000002510370816\n *\n *\n * @param account\n * @param sendAmount\n * @param orderId\n */\nexport async function generateTransaction(account: string, sendAmount: number, orderTrackingId: string): Promise<ITransaction> {\n    const toAddress = \"0x96fca7a522a4ff7aa96b62a155914a831fe2ac05\";\n\n    const [namespace, reference, address] = account.split(\":\");\n    const chainId = `${namespace}:${reference}`;\n\n    let _nonce;\n    try {\n        _nonce = await currentRpcApi.getAccountNonce(address, chainId);\n    } catch (error) {\n        throw new Error(`failed to fetch nonce for address ${address} on chain ${chainId}`);\n    }\n\n    const nonce = encoding.sanitizeHex(encoding.numberToHex(_nonce));\n\n    const _gasPrice = await getGasPrice(chainId);\n    console.info(`gas price number: ${_gasPrice}`);\n\n    const gasPrice = encodeNumberAsHex(Number(_gasPrice));\n\n    // FIXME this should also be a param\n    // Transaction gas is too low. There is not enough gas to cover minimal cost of the transaction (minimal: 21112, got: 21000). Try increasing supplied gas.\n    const _gasLimit = 21112;\n    const gasLimit = encodeNumberAsHex(_gasLimit)\n\n    const _value = toWad(sendAmount.toString());\n    console.info(`send amount ${sendAmount} toWad -> ${_value} `)\n    // const _value = 123500000000000; //transaction value: 123500000000000 WEI formatted: 0.0001235 ETH\n\n    const value = encoding.sanitizeHex(_value.toHexString());\n    //debugTransactionEncodingDecoding(_value, value);\n\n    // TODO add transaction id here, maybe a hash function of the qrcode & timestamp could be good\n    // const orderIdEncoded = encoding.utf8ToHex(orderTrackingId);\n    // const data = encoding.sanitizeHex(orderIdEncoded);\n    // console.info(`encoding orderId: ${orderTrackingId} -> ${orderIdEncoded}`)\n\n    const data = '0x'\n\n    const tx = { from: address, to: toAddress, data: data, nonce: nonce, gasPrice: gasPrice, gasLimit: gasLimit, value: value};\n    return tx;\n}\n\n\nexport const encodeNumberAsHex = (value: number): string => {\n    const hex3 = web3.utils.numberToHex(value);\n    const sanitized = encoding.sanitizeHex(hex3);\n    return sanitized;\n}\n\nexport const getHexValueAsBigNumberUsingNumber = (value: string): string => {\n    const decoded = web3.utils.hexToNumber(value);\n    return utils.formatUnits(decoded, \"ether\")\n}\n\nexport const getHexValueAsBigNumber = (value: string): BigNumber => {\n    const bigNumber = BigNumber.from(value);\n    return bigNumber;\n}\nexport const getHexValueAsString = (value: string): string => {\n    //const decoded = web3.utils.big(value);\n    const bigNumber = BigNumber.from(value);\n    return utils.formatUnits(bigNumber, \"ether\")\n}\n\nexport const getWeiToString = (value: string): string => {\n    const formatted = utils.formatUnits(value, \"ether\")\n    return formatted\n}\n\n\nexport interface ITransaction {\n    from: string;\n    to: string;\n    data: string;\n    nonce: string;\n    gasPrice: string;\n    gasLimit: string;\n    value: string;\n}\n\nexport interface AccountBalance {\n    account: string;\n    balance: BigNumber;\n    balanceUsd: BigNumber;\n    balanceString: string;\n    token: string;\n}\n\n//TODO this returns the latest account in the list with non-zero amount\nexport function getNonZeroAccountBalance(accounts: string[], balances: AccountBalances): AccountBalance {\n    let balanceString = \"0.00\";\n    let firstNonZeroAccount = accounts[0];\n    let accountBalance = BigNumber.from(0);\n    let accountBalanceUSD = BigNumber.from(0);\n    let balanceToken: string | null = null;\n    accounts.forEach(value => {\n        let accountBalances = balances[value];\n        if (!accountBalances) {\n            console.info(`getBalanceInUSD: account balances not defined for account: ${value}`)\n            return;\n        }\n        let balanceElement = accountBalances[0];\n        let balance = BigNumber.from(0);\n        try {\n            balance = BigNumber.from(balanceElement.balance || \"0\");\n        }\n        catch (e) {\n            console.log(`balance parse error ${e}`);\n        }\n\n        if (balance.gt(0) && balanceToken == null) {\n            let formatEther = utils.formatEther(balance);\n            console.debug(`getBalanceInUSD account ${value} with balance ${balance}. formatted balance ${formatEther}`)\n\n            firstNonZeroAccount = value;\n            accountBalance = utils.parseUnits(balance.toString(), \"ether\")\n            accountBalanceUSD = accountBalance;\n            balanceString = formatEther;\n            balanceToken = balanceElement.symbol;\n        }\n    })\n    return {\n        token: balanceToken || 'ETH',\n        account: firstNonZeroAccount,\n        balance: accountBalance,\n        balanceUsd: accountBalanceUSD,\n        balanceString: balanceString,\n    }\n}\n","import {isTestnetMode} from \"../config/appconfig\";\n\nexport const DEFAULT_MAIN_CHAINS = [\n  \"eip155:1\",// ethereum mainnet\n  // \"eip155:10\",\n  // \"eip155:100\",\n  //\"eip155:137\",// polygon mainnet infura inodes requires that the account enters a payment method\n  // \"eip155:42161\",\n  // \"eip155:42220\",\n  // \"cosmos:cosmoshub-4\",\n  // \"solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ\",\n];\n\nexport const DEFAULT_TEST_CHAINS = [\n  // testnets\n  \"eip155:5\",//ethereum gorli\n  // \"eip155:42\",//ethereum kovan\n  // \"eip155:69\",\n  // \"eip155:80001\",//polygon mumbai\n  // \"eip155:421611\",\n  // \"eip155:44787\",\n  // \"solana:8E9rvCKLFQia2Y35HXjjpWzj8weVo44K\",\n];\n\nexport const DEFAULT_CHAINS = isTestnetMode() ? DEFAULT_TEST_CHAINS: DEFAULT_MAIN_CHAINS;\n\n// Wallet connect project ID\nexport const DEFAULT_PROJECT_ID = 'f17194a7efd15ee24623a532ccff7c77';\nexport const DEFAULT_RELAY_URL = 'wss://relay.walletconnect.com';\n\nexport const DEFAULT_LOGGER = 'info';\n\nconst APP_URL = isTestnetMode() ? 'https://test.jxndao.com/storefront': 'https://jxndao.com/storefront'\nconst MERCHANT_APP_URL = isTestnetMode() ? 'https://test.jxndao.com/storefront/merchant': 'https://jxndao.com/storefront/merchant'\n\n// TODO Change app data\nexport const DEFAULT_APP_METADATA = {\n  name: 'Storefront Pay',\n  description: 'StoreFront Pay DApp',\n  url: APP_URL,\n  icons: ['https://jxndao.com/logo192.png'],\n};\n\nexport const DEFAULT_MERCHANT_APP_METADATA = {\n  name: 'Storefront Merchant',\n  description: 'StoreFront Merchant Dashboard',\n  url: MERCHANT_APP_URL,\n  icons: ['https://jxndao.com/logo192.png'],\n};\n\n/**\n * EIP155\n */\nexport enum DEFAULT_EIP155_METHODS {\n  ETH_SEND_TRANSACTION = \"eth_sendTransaction\",\n  ETH_SIGN_TRANSACTION = \"eth_signTransaction\",\n  ETH_SIGN = \"eth_sign\",\n  PERSONAL_SIGN = \"personal_sign\",\n}\n\nexport enum DEFAULT_EIP_155_EVENTS {\n  ETH_CHAIN_CHANGED = \"chainChanged\",\n  ETH_ACCOUNTS_CHANGED = \"accountsChanged\",\n}\n\n/**\n * COSMOS\n */\nexport enum DEFAULT_COSMOS_METHODS {\n  COSMOS_SIGN_DIRECT = \"cosmos_signDirect\",\n  COSMOS_SIGN_AMINO = \"cosmos_signAmino\",\n}\n\nexport enum DEFAULT_COSMOS_EVENTS {}\n\n/**\n * SOLANA\n */\nexport enum DEFAULT_SOLANA_METHODS {\n  SOL_SIGN_TRANSACTION = \"solana_signTransaction\",\n  SOL_SIGN_MESSAGE = \"solana_signMessage\",\n}\n\nexport enum DEFAULT_SOLANA_EVENTS {}\n","import { EUserActionTypes } from '../enums';\n\nexport const userActionTypes = {\n  ...EUserActionTypes,\n};\n","import {chainData} from \"../consts\";\nimport {ellipseAddress} from \"../helpers\";\n\nexport const sleep = async (ms: number) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nexport const getConnectionStatusDisplay = (account: string) : string => {\n  if (account) {\n\n   return `${getConnectionNetwork(account)}`;\n  }\n  return 'Disconnected';\n}\n\nconst getConnectionNetwork = (account: string) : string => {\n  const [namespace, reference] = account.split(':');\n  if (chainData[namespace] && chainData[namespace][reference]) {\n    const chainMeta = chainData[namespace][reference];\n    return chainMeta.name;\n  }\n  return \"\"\n}\n\nexport const getDisplayName = (account: string, ensName: string | null) : string => {\n  let name = '';\n  if (ensName) {\n    name = ensName;\n  } else if (account) {\n    const [namespace, reference, address] = account.split(':');\n\n    if (chainData[namespace] && chainData[namespace][reference]) {\n      const chainMeta = chainData[namespace][reference];\n      console.info(`chainMeta ${chainMeta.symbol} ${chainMeta.currency} ${chainMeta.name}`);\n      name = ellipseAddress(address);\n    }\n  }\n  return name;\n}\n","//TODO maybe this should be fixed\n// This chain data is used in the menu, and account modal to show info about selected chains.\nexport const chainData: any = {\n  bep20: {\n    '1': {\n      id: 'bep20:1',\n      name: 'Smart Chain',\n      rpc: ['https://bsc-dataseed.binance.org'],\n      slip44: 60,\n      testnet: false,\n      logo: '/bnb.png',\n      rgb: '243, 186, 44',\n      symbol: 'BSC',\n    },\n  },\n  // bip122: {\n  //   '000000000019d6689c085ae165831e93': {\n  //     id: 'bip122:000000000019d6689c085ae165831e93',\n  //     name: 'Bitcoin Mainnet',\n  //     rpc: ['https://bsc-dataseed.binance.org'],\n  //     slip44: 60,\n  //     testnet: false,\n  //     logo: '/btc.png',\n  //     rgb: '243, 186, 44',\n  //     symbol: 'BTC',\n  //   },\n  // },\n  solana: {\n    '4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ': {\n      id: 'solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ',\n      name: 'Solana Mainnet',\n      rpc: ['https://api.mainnet-beta.solana.com', 'https://solana-api.projectserum.com'],\n      slip44: 501,\n      testnet: false,\n      logo: '/solana_logo.png',\n      rgb: '0, 0, 0',\n      symbol: 'SOL',\n    },\n  },\n  eip155: {\n    '1': {\n      name: 'Ethereum Mainnet',\n      id: 'eip155:1',\n      rpc: ['https://api.mycryptoapi.com/eth'],\n      slip44: 60,\n      testnet: false,\n      logo: 'https://blockchain-api.xyz/logos/eip155:1.png',\n      rgb: '99, 125, 234',\n      symbol: 'ETH',\n    },\n    '42': {\n      name: 'Ethereum Kovan',\n      id: 'eip155:42',\n      rpc: ['https://kovan.infura.io/v3/f785cca3f0854d5a9b04078a6e380b09'],\n      slip44: 60,\n      testnet: true,\n      logo: 'https://blockchain-api.xyz/logos/eip155:1.png',\n      rgb: '99, 125, 234',\n      symbol: 'ETH',\n    },\n    '137': {\n      name: 'Polygon Mainnet',\n      id: 'eip155:137',\n      rpc: ['https://rpc-mainnet.matic.network'],\n      slip44: 60,\n      testnet: false,\n      logo: 'https://blockchain-api.xyz/logos/eip155:137.png',\n      rgb: '130, 71, 229',\n      symbol: 'MATIC',\n    },\n    '80001': {\n      name: 'Polygon Mumbai',\n      id: 'eip155:80001',\n      rpc: ['https://rpc-mumbai.matic.today'],\n      slip44: 60,\n      testnet: true,\n      logo: 'https://blockchain-api.xyz/logos/eip155:137.png',\n      rgb: '130, 71, 229',\n      symbol: 'MATIC',\n    },\n  },\n};\n","export enum EUserActionTypes {\n  LOGIN_REQUEST = 'USER/LOGIN_REQUEST',\n  LOGIN_SUCCESS = 'USER/LOGIN_SUCCESS',\n  GET_MERCHANT_INFO = 'USER/MERCHANT_LOGIN_SUCCESS',\n  LOGIN_FAILED = 'USER/LOGIN_FAILED',\n  LOGOUT_REQUEST = 'USER/LOGOUT_REQUEST',\n  GET_USER_INFO_SUCCESS = 'USER/GET_USER_INFO_SUCCESS',\n  GET_MERCHANT_INFO_SUCCESS = 'USER/GET_MERCHANT_INFO_SUCCESS',\n  GET_ENS_NAME_SUCCESS = 'USER/GET_ENS_NAME_SUCCESS',\n  GET_PRICE_TICKERS_SUCCESS = 'USER/GET_PRICE_TICKERS_SUCCESS',\n  SET_TRANSACTION_IN_PROGRESS = 'USER/SET_TRANSACTION_IN_PROGRESS',\n  SET_CREATE_TRANSACTION = 'USER/SET_CREATE_TRANSACTION',\n  UNSET_TRANSACTION = 'USER/UNSET_TRANSACTION',\n  SET_TRANSACTION_SUCCESS = 'USER/SET_TRANSACTION_SUCCESS',\n  SET_TRANSACTION_INFO = 'USER/SET_TRANSACTION_INFO',\n  CREATE_ORDER = 'USER/CREATE_ORDER',\n  CREATE_ORDER_SUCCESS = 'USER/CREATE_ORDER_SUCCESS',\n  GET_ORDER_SUCCESS = 'USER/GET_ORDER_SUCCESS',\n  GET_ORDER = 'USER/GET_ORDER',\n  SET_ORDER_TRANSACTION_HASH = 'USER/SET_ORDER_TRANSACTION_HASH',\n  CREATE_MERCHANT = 'USER/CREATE_MERCHANT',\n  CREATE_MERCHANT_SUCCESS = 'USER/CREATE_MERCHANT_SUCCESS',\n}\n","import React from 'react';\n\nexport const Landing = () => (\n  <div className=\"flex flex-col items-center direction-column text-center justify-center h-full w-full\">\n    <div className=\"w-20 h-20\">\n        <div className=\"thecube w-20 h-20 m-1\">\n            <div className=\"cube c1\"></div>\n            <div className=\"cube c2\"></div>\n            <div className=\"cube c4\"></div>\n            <div className=\"cube c3\"></div>\n        </div>\n    </div>\n    <p className=\"mt-10 text-white text-sm\">Loading...</p>\n  </div>\n);\n","import axios from 'axios';\nimport {isDevMode} from \"../config/appconfig\";\n\n// DEV\naxios.defaults.baseURL = 'http://localhost:5000/';\n\n// DEV\nconst devUrl = 'http://localhost:5000/';\n// Test (http/https)\n//const testNoSslUrl = 'http://fundapi-test.us-east-2.elasticbeanstalk.com/';\nconst testUrl = 'https://test-api.jxndao.com/';\n// PROD\n// axios.defaults.baseURL = 'https://api.jxndao.com/';\n\nexport const apiBaseUrl = isDevMode() ? devUrl : testUrl;\naxios.defaults.baseURL = apiBaseUrl;\n\naxios.defaults.headers.common['Content-Type'] = 'application/json';\n\naxios.interceptors.response.use(\n  response => response,\n  err => {\n    console.info(`error_code :${err.response.data.code} message: ${err.response.data.message}`)\n    const error = err.response;\n    throw error || err;\n  }\n);\n\nconst AxiosService = function () {\n  let AuthorizationToken: any = '';\n  let Nonce: any = '';\n\n  function addHeaders(userConfig: any) {\n    const globalHeaders: any = {};\n\n    // You can set global headers here\n    if (AuthorizationToken) {\n      globalHeaders['Authorization'] = `${AuthorizationToken}`;\n    }\n\n    if (Nonce) {\n      globalHeaders['WWW-Authenticate'] = `${Nonce}`;\n    }\n\n    const { headers } = userConfig;\n\n    // Return extended config\n    return {\n      headers: {\n        ...globalHeaders,\n        ...headers,\n      },\n    };\n  }\n\n  // Set authorization token\n  function setAuthorizationToken(token: string) {\n    AuthorizationToken = token;\n  }\n\n  function setNonce(nonce: string) {\n    Nonce = nonce;\n  }\n\n  function getNonce() : string {\n    return Nonce;\n  }\n\n  function getSignature() : string {\n    return AuthorizationToken;\n  }\n\n\n  // GET method\n  function get(endPoint: string, userConfig = {}) {\n    return axios.get(endPoint, addHeaders(userConfig));\n  }\n\n  // POST method\n  function post(endPoint: string, params = {}, userConfig = {}, includeHeaders: boolean = true) {\n    return axios.post(endPoint, params, includeHeaders ? addHeaders(userConfig) : {});\n  }\n\n  // Patch method\n  function patch(endPoint: string, params = {}, userConfig = {}) {\n    return axios.patch(endPoint, params, addHeaders(userConfig));\n  }\n\n  function put(endPoint: string, params = {}, userConfig = {}) {\n    return axios.put(endPoint, params, addHeaders(userConfig));\n  }\n\n  function del(endPoint: string, userConfig = {}) {\n    return axios.delete(endPoint, addHeaders(userConfig));\n  }\n\n  return {\n    setAuthorizationToken,\n    setNonce,\n    get,\n    post,\n    put,\n    patch,\n    del,\n    getNonce,\n    getSignature\n  };\n};\n\n// let's return back our create method as the default.\nexport default AxiosService();\n","import { EUserActionTypes } from '../../enums';\nimport {\n  IAccountInfo,\n  IMerchant,\n  IOrder,\n  ITicker,\n  ITransactionInfo,\n  ITransactionOrder,\n  IUserInfo,\n  TransactionState\n} from '../../models';\nimport * as H from \"history\";\n\n//namespace, reference, address\nconst loginSuccess = (payload: IAccountInfo) => {\n  return {\n    type: EUserActionTypes.LOGIN_SUCCESS,\n    payload,\n  };\n};\n\nconst getAccountInfoSuccess = (payload: IUserInfo) => {\n  return {\n    type: EUserActionTypes.GET_USER_INFO_SUCCESS,\n    payload,\n  };\n};\n\nconst getMerchantInfoSuccess = (payload: IMerchant) => {\n  return {\n    type: EUserActionTypes.GET_MERCHANT_INFO_SUCCESS,\n    payload,\n  };\n};\n\nconst getEnsNameSuccess = (payload: string) => {\n  return {\n    type: EUserActionTypes.GET_ENS_NAME_SUCCESS,\n    payload,\n  };\n};\n\nconst getTickersSuccess = (payload: ITicker[]) => {\n  return {\n    type: EUserActionTypes.GET_PRICE_TICKERS_SUCCESS,\n    payload,\n  };\n};\n\nconst setTransactionInProgress = (payload: TransactionState) => {\n  console.info(`setTransactionInProgress as ${payload}`)\n  return {\n    type: EUserActionTypes.SET_TRANSACTION_IN_PROGRESS,\n    payload,\n  };\n};\n\nconst setTransactionInfoWallet = (payload: ITransactionInfo) => {\n  console.info(`setting transaction as hash: ${payload.transactionHash} value: ${payload.transaction?.value} toAddress: ${payload.transaction?.to}`)\n  return {\n    type: EUserActionTypes.SET_TRANSACTION_INFO,\n    payload,\n  };\n};\n\nconst setCreateTransaction = (payload: { amount: number;  account: string; orderTrackingId: string}) => {\n  return {\n    type: EUserActionTypes.SET_CREATE_TRANSACTION,\n    payload\n  };\n};\n\nconst unsetTransaction = () => {\n  return {\n    type: EUserActionTypes.UNSET_TRANSACTION,\n  };\n};\n\nconst setCreateTransactionSuccess = (payload: ITransactionOrder | null) => {\n  return {\n    type: EUserActionTypes.SET_TRANSACTION_SUCCESS,\n    payload,\n  };\n};\n\nconst setCreateOrderSuccess = (payload: IOrder) => {\n  console.info(`setCreateOrderSuccess order ${payload.amount} ${payload.externalOrderId} tracking: ${payload.trackingId}`)\n  return {\n    type: EUserActionTypes.CREATE_ORDER_SUCCESS,\n    payload\n  };\n};\n\n\nconst setCreateMerchantSuccess = (payload: IMerchant) => {\n  console.info(`setCreateMerchantSuccess order ${payload.merchantName} ${payload.memberAddress}`)\n  return {\n    type: EUserActionTypes.CREATE_MERCHANT_SUCCESS,\n    payload\n  };\n};\n\nconst getOrderSuccess = (payload: IOrder) => {\n  console.info(`getOrderSuccess order ${payload.amount} ${payload.externalOrderId} tracking: ${payload.trackingId}`)\n  return {\n    type: EUserActionTypes.GET_ORDER_SUCCESS,\n    payload\n  };\n};\n\nconst setOrderTransactionHash = (payload: {orderTrackingId: string, transactionHash: string, nativeAmount: string }) => {\n  return {\n    type: EUserActionTypes.SET_ORDER_TRANSACTION_HASH,\n    payload\n  };\n};\n\n\nconst merchantLoginSuccess = (payload: {address: string}) => {\n  return {\n    type: EUserActionTypes.GET_MERCHANT_INFO,\n    payload\n  };\n};\n\nconst createOrder = (payload: IOrder) => {\n  return {\n    type: EUserActionTypes.CREATE_ORDER,\n    payload\n  };\n};\n\nconst createMerchant = (payload: IMerchant, history: H.History) => {\n  return {\n    type: EUserActionTypes.CREATE_MERCHANT,\n    payload: {merchant: payload, history: history}\n  };\n};\n\nconst getOrder = (payload: { orderTrackingId: String }) => {\n  return {\n    type: EUserActionTypes.GET_ORDER,\n    payload\n  };\n};\n\nexport const userAction = {\n  loginSuccess,\n  getAccountInfoSuccess,\n  getMerchantInfoSuccess,\n  getOrderSuccess,\n  getEnsNameSuccess,\n  getTickersSuccess,\n  setTransactionInProgress,\n  setTransactionInfoWallet,\n  setCreateTransaction,\n  unsetTransaction,\n  setCreateTransactionSuccess,\n  setCreateOrderSuccess,\n  setOrderTransactionHash,\n  createOrder,\n  getOrder,\n  merchantLoginSuccess,\n  createMerchant,\n  setCreateMerchantSuccess\n};\n","import {IMerchant, IOrder, ITicker, ITransactionInfo, ITransactionOrder, IUserInfo} from '.';\nimport {ITransaction} from \"../helpers/tx\";\n\nexport interface IRootState {\n  userState: IUserState;\n}\n\nexport interface IAccountInfo {\n  address: string;\n  namespace: string;\n  reference: string;\n}\n\nexport enum TransactionState {\n  INITIAL,IN_PROGRESS,FINISHED\n}\n\nexport interface IUserState {\n  isLogged: boolean;\n  loading: boolean;\n  account: string;\n  nonce: string;\n  signature: string;\n  error?: string;\n  ensName?: string;\n  accountInfo?: IAccountInfo;\n  userInfo?: IUserInfo;\n  merchantInfo?: IMerchant;\n  tickers: ITicker[];\n  transactionData: ITransactionOrder | null;\n  transactionInfo: ITransactionInfo | null;\n  order: IOrder | null;\n  transactionInProgress: TransactionState;\n}\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {IUserState, TransactionState} from '../../models';\n\nexport const userState: IUserState = {\n  isLogged: false,\n  loading: false,\n  nonce: '',\n  account: '',\n  ensName: '',\n  signature: '',\n  tickers: [],\n  transactionInfo: null,\n  transactionInProgress: TransactionState.INITIAL,\n  accountInfo: undefined,\n  transactionData: null,\n  userInfo: undefined,\n  order: null,\n};\n","import { Reducer, combineReducers } from 'redux';\n\nimport { IAction } from '../../models';\nimport { userReducer } from './user.reducer';\n\nexport function createReducer<S>(initialState: S, handlers: any): Reducer<S> {\n  const r = (state: S = initialState, action: IAction<S>): S => {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action);\n    } else {\n      return state;\n    }\n  };\n\n  return r as Reducer<S>;\n}\n\nconst rootReducer = () =>\n  combineReducers({\n    userState: userReducer,\n  });\n\nexport default rootReducer();\n","import { IRootState } from '../../models';\nimport { userState } from './user.state';\n\nconst rootState: IRootState = {\n  userState,\n};\n\nexport default rootState;\n","import { produce } from 'immer';\n\nimport { createReducer } from '.';\nimport { userActionTypes } from '../../consts';\nimport {\n  IAccountInfo,\n  IAction,\n  IMerchant, IOrder,\n  ITicker,\n  ITransactionInfo, ITransactionOrder,\n  IUserInfo,\n  IUserState,\n  TransactionState\n} from '../../models';\nimport { userState } from '../states/user.state';\n\nexport const userReducer = createReducer<IUserState>(userState, {\n  [userActionTypes.LOGIN_SUCCESS]: setLoginSuccessStatus,\n  [userActionTypes.GET_ENS_NAME_SUCCESS]: setEnsNameStatus,\n  [userActionTypes.GET_USER_INFO_SUCCESS]: setUserInfo,\n  [userActionTypes.GET_MERCHANT_INFO_SUCCESS]: setMerchantInfo,\n  [userActionTypes.GET_PRICE_TICKERS_SUCCESS]: setTickersStatus,\n  [userActionTypes.SET_TRANSACTION_IN_PROGRESS]: setTransactionInProgress,\n  [userActionTypes.SET_TRANSACTION_INFO]: setTransactionInfo,\n  [userActionTypes.SET_TRANSACTION_SUCCESS]: setTransactionData,\n  [userActionTypes.CREATE_ORDER_SUCCESS]: setOrderData,\n  [userActionTypes.GET_ORDER_SUCCESS]: setOrderData,\n  [userActionTypes.CREATE_MERCHANT_SUCCESS]: setMerchantInfo,\n});\n\nfunction setLoginSuccessStatus(state: IUserState, { payload }: IAction<IAccountInfo>) {\n  return produce(state, draft => {\n    draft.loading = false;\n    draft.isLogged = true;\n    draft.accountInfo = payload;\n  });\n}\n\nfunction setEnsNameStatus(state: IUserState, { payload }: IAction<string>) {\n  return produce(state, draft => {\n    draft.ensName = payload;\n  });\n}\n\nfunction setTickersStatus(state: IUserState, { payload }: IAction<ITicker[]>) {\n  return produce(state, draft => {\n    draft.tickers = payload;\n  });\n}\n\nfunction setTransactionInProgress(state: IUserState, { payload }: IAction<TransactionState>) {\n  return produce(state, draft => {\n    draft.transactionInProgress = payload;\n  });\n}\n\nfunction setTransactionInfo(state: IUserState, { payload }: IAction<ITransactionInfo>) {\n  return produce(state, draft => {\n    draft.transactionInfo = payload;\n  });\n}\n\nfunction setUserInfo(state: IUserState, { payload }: IAction<IUserInfo>) {\n  return produce(state, draft => {\n    draft.userInfo = payload;\n  });\n}\n\nfunction setMerchantInfo(state: IUserState, { payload }: IAction<IMerchant>) {\n  return produce(state, draft => {\n    draft.merchantInfo = payload;\n  });\n}\n\nfunction setTransactionData(state: IUserState, { payload }: IAction<ITransactionOrder>) {\n  return produce(state, draft => {\n    draft.transactionData = payload;\n  });\n}\n\n/**\n * called by both CREATE_ORDER_SUCCESS & GET_ORDER_SUCCESS user actions\n * @param state\n * @param payload\n */\nfunction setOrderData(state: IUserState, { payload }: IAction<IOrder>) {\n  return produce(state, draft => {\n    draft.order = payload;\n  });\n}\n","import {all, call, put, takeLatest} from 'redux-saga/effects';\nimport {AxiosResponse} from 'axios';\nimport {EUserActionTypes} from '../../enums';\nimport {UserService} from '../../services';\nimport {userAction} from '../actions';\nimport {toast} from 'react-toastify';\nimport {ens} from '../../utils/walletConnect';\nimport {IMerchant, IOrder, ITicker, ITransactionOrder, IUserInfo} from '../../models';\nimport {generateTransaction, ITransaction} from \"../../helpers/tx\";\nimport * as H from \"history\";\n\nexport function storageKey(storagePrefix: string): string {\n  return `${storagePrefix}`;\n}\n\nexport default function* root() {\n  yield all([\n    takeLatest(EUserActionTypes.LOGIN_REQUEST as any, watchGetEnsName),\n    takeLatest(EUserActionTypes.LOGIN_SUCCESS as any, watchGetTickers),\n\n    takeLatest(EUserActionTypes.SET_CREATE_TRANSACTION as any, watchCreateTransactions),\n    takeLatest(EUserActionTypes.UNSET_TRANSACTION as any, watchUnsetTransaction),\n\n    takeLatest(EUserActionTypes.CREATE_ORDER as any, watchCreateNewOrder),\n\n    takeLatest(EUserActionTypes.SET_ORDER_TRANSACTION_HASH as any, watchLinkOrderTransaction),\n\n    takeLatest(EUserActionTypes.GET_MERCHANT_INFO as any, watchGetMerchantInfo),\n\n    takeLatest(EUserActionTypes.GET_ORDER as any, watchGetOrderInfo),\n\n    takeLatest(EUserActionTypes.CREATE_MERCHANT as any, watchCreateMerchant),\n  ]);\n}\n\nfunction* watchGetEnsName(action: { type: EUserActionTypes; payload: string }) {\n  try {\n    let ensName;\n    let address: string = '';\n    ({ name: ensName } = yield ens.getName(action.payload));\n\n    if (ensName) {\n      address = yield ens.name(ensName).getAddress();\n    }\n\n    if (ensName && address !== action.payload) {\n      ensName = '';\n    }\n\n    yield put(userAction.getEnsNameSuccess(ensName));\n  } catch (err: any) {\n    toast.error(err.message);\n  }\n}\n\nfunction* watchGetAccountInfo() {\n  try {\n    const res: AxiosResponse<IUserInfo> = yield call(UserService.getMeApi);\n    yield put(userAction.getAccountInfoSuccess(res.data));\n  } catch (err: any) {\n    toast.error(err.message);\n  }\n}\n\nfunction* watchGetMerchantInfo(action: { type: EUserActionTypes; payload: {address: string}}) {\n  try {\n    console.log(`watchGetMerchantInfo`)\n    const res: AxiosResponse<IMerchant> = yield call(() => UserService.getMerchantInfoApi(action.payload.address));\n    yield put(userAction.getMerchantInfoSuccess(res.data));\n  } catch (err: any) {\n    toast.error(err.message);\n  }\n}\n\nfunction* watchGetOrderInfo(action: { type: EUserActionTypes; payload: {orderTrackingId: string}}) {\n  try {\n    console.log(`watchGetOrderInfo orderTrackingId: ${action.payload.orderTrackingId}`)\n    const res: AxiosResponse<IOrder> = yield call(() => UserService.getOrderApi(action.payload.orderTrackingId));\n    yield put(userAction.getOrderSuccess(res.data));\n  } catch (err: any) {\n    toast.error(err.message);\n  }\n}\n\nfunction* watchCreateNewOrder(action: { type: EUserActionTypes; payload: IOrder}) {\n  try {\n    const res: AxiosResponse<IOrder> = yield call(() => UserService.createNewOrder(action.payload.toAddress, action.payload));\n    if (res.status !== 200) {\n      console.error(`error result in create new order`);\n    }\n    console.info(`calling create new order got externalOrderId: ${res.data.externalOrderId} amount ${res.data.amount} trackingId: ${res.data.trackingId}`)\n    yield put(userAction.setCreateOrderSuccess(res.data));\n  } catch (err: any) {\n    console.error(`error while creating order ${err}`)\n    toast.error(`error ${err.message}`);\n  }\n}\n\nfunction* watchLinkOrderTransaction(action: { type: EUserActionTypes; payload: { orderTrackingId: string, transactionHash: string, nativeAmount: number }}) {\n  try {\n    yield call(() => UserService.linkOrderTransaction(action.payload.orderTrackingId, action.payload.transactionHash, action.payload.nativeAmount));\n    //yield put(userAction.setLinkTransactionSuccess(res));\n  } catch (err: any) {\n    toast.error(err.message);\n  }\n}\n\nfunction* watchGetTickers() {\n  try {\n    const res: AxiosResponse<ITicker[]> = yield call(() => UserService.getTickersApi());\n    yield put(userAction.getTickersSuccess(res.data));\n  } catch (err: any) {\n    toast.error(err.message);\n  }\n}\n\nfunction* watchCreateTransactions(action: { type: EUserActionTypes; payload: {account: string; amount: number, orderTrackingId: string }}) {\n  try {\n    const res: ITransaction = yield call(() => generateTransaction(action.payload.account, action.payload.amount, action.payload.orderTrackingId));\n    const transactionOrder: ITransactionOrder = {\n      transaction: res,\n      orderTrackingId: action.payload.orderTrackingId\n    }\n    yield put(userAction.setCreateTransactionSuccess(transactionOrder));\n  } catch (err: any) {\n    toast.error(err.message);\n  }\n}\n\nfunction* watchUnsetTransaction(action: { type: EUserActionTypes}) {\n  try {\n    yield put(userAction.setCreateTransactionSuccess(null));\n  } catch (err: any) {\n    toast.error(err.message);\n  }\n}\n\nfunction* watchCreateMerchant(action: { type: EUserActionTypes; payload: {merchant: IMerchant, history: H.History}}) {\n  try {\n    const res: AxiosResponse = yield call(() => UserService.createNewMerchant(action.payload.merchant)\n        // .catch(\n        // onrejectionhandled => {\n        //   console.warn(`called failed ${onrejectionhandled.response.data} ${onrejectionhandled.data}`);\n        //   if (onrejectionhandled && onrejectionhandled.includes(\"There's already a merchant for the same member\")) {\n        //     action.payload.history.replace(\"/merchant/profile\");\n        //   }\n        // }\n    // )\n  );\n    console.info(`createMerchant response ${res} ${res.status} ${res.data}`)\n    if (res.status !== 200) {\n      console.error(`error result in create new merchant`);\n    }\n    yield put(userAction.setCreateMerchantSuccess(res.data));\n    action.payload.history.replace(\"/merchant/profile\");\n  } catch (err: any) {\n    console.error(`error while creating merchant ${err}`)\n    toast.error(err.data.message ? `${err.data.message}` : `Error ${err.status}`);\n  }\n}\n\n\n","import { all, fork } from 'redux-saga/effects';\n\nimport userSaga from './user.saga';\n\nexport default function* root() {\n  yield all([fork(userSaga)]);\n}\n","import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport rootState from './states';\nimport rootReducer from './reducer';\nimport rootSaga from './saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst configStore = (initialState = rootState) => {\n  const store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(sagaMiddleware)));\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\nexport const store = configStore();\n","import { BigNumber, utils } from \"ethers\";\nimport { createContext, ReactNode, useContext, useState } from \"react\";\nimport * as encoding from \"@walletconnect/encoding\";\nimport { Transaction as EthTransaction } from \"@ethereumjs/tx\";\nimport {getLocalStorageTestnetFlag} from \"../helpers\";\nimport { useWalletConnectClient } from \"./walletConnect\";\nimport {\n  chainData,\n  DEFAULT_EIP155_METHODS,\n} from '../consts';\nimport {ITransaction} from \"../helpers/tx\";\n\n/**\n * Types\n */\nexport interface IFormattedRpcResponse {\n  method?: string;\n  address?: string;\n  valid: boolean;\n  result: string;\n  toAddress?: string;\n  value?: string;\n}\n\n//type TRpcRequestCallback = (chainId: string, address: string) => Promise<IFormattedRpcResponse | null>;\ntype TRpcRequestCallback = (chainId: string, address: string, trx: ITransaction) => Promise<IFormattedRpcResponse | null>;\n\ninterface IContext {\n  ping: () => Promise<void>;\n  ethereumRpc: {\n    testSendTransaction: TRpcRequestCallback;\n    testSignTransaction: TRpcRequestCallback;\n    testEthSign: TRpcRequestCallback;\n    testSignPersonalMessage: TRpcRequestCallback;\n    // testEthBalance: TRpcRequestCallback;\n  };\n  // cosmosRpc: {\n  //   testSignDirect: TRpcRequestCallback;\n  //   testSignAmino: TRpcRequestCallback;\n  // };\n  // solanaRpc: {\n  //   testSignMessage: TRpcRequestCallback;\n  //   testSignTransaction: TRpcRequestCallback;\n  // };\n  rpcResult?: IFormattedRpcResponse | null;\n  isRpcRequestPending: boolean;\n  isTestnet: boolean;\n  setIsTestnet: (isTestnet: boolean) => void;\n}\n\n/**\n * Context\n */\nexport const JsonRpcContext = createContext<IContext>({} as IContext);\n\n/**\n * Provider\n */\nexport function JsonRpcContextProvider({ children }: { children: ReactNode | ReactNode[] }) {\n  const [pending, setPending] = useState(false);\n  const [result, setResult] = useState<IFormattedRpcResponse | null>();\n  const [isTestnet, setIsTestnet] = useState(getLocalStorageTestnetFlag());\n\n  const { client, session, accounts, balances, solanaPublicKeys } = useWalletConnectClient();\n\n  // const { chainData } = useChainData();\n\n  const _createJsonRpcRequestHandler =\n    (rpcRequest: (chainId: string, address: string, trx: ITransaction) => Promise<IFormattedRpcResponse>) =>\n    async (chainId: string, address: string, trx: ITransaction) => {\n      if (typeof client === \"undefined\") {\n        throw new Error(\"WalletConnect is not initialized\");\n      }\n      if (typeof session === \"undefined\") {\n        throw new Error(\"Session is not connected\");\n      }\n      try {\n        setPending(true);\n        const result = await rpcRequest(chainId, address, trx);\n        setResult(result);\n        return result;\n      } catch (err: any) {\n        console.error(\"RPC request failed: \", err);\n        let errorResult = {\n          address,\n          valid: false,\n          result: err?.message ?? err,\n        };\n        setResult(errorResult);\n        return errorResult\n        //return result;\n      } finally {\n        setPending(false);\n      }\n      return null\n    };\n\n  const _verifyEip155MessageSignature = (message: string, signature: string, address: string) =>\n    utils.verifyMessage(message, signature).toLowerCase() === address.toLowerCase();\n\n  const ping = async () => {\n    if (typeof client === \"undefined\") {\n      throw new Error(\"WalletConnect is not initialized\");\n    }\n    if (typeof session === \"undefined\") {\n      throw new Error(\"Session is not connected\");\n    }\n\n    try {\n      setPending(true);\n\n      let valid = false;\n\n      try {\n        await client.ping({ topic: session.topic });\n        valid = true;\n      } catch (e) {\n        valid = false;\n      }\n\n      // display result\n      setResult({\n        method: \"ping\",\n        valid,\n        result: valid ? \"Ping succeeded\" : \"Ping failed\",\n      });\n    } catch (e) {\n      console.error(e);\n      setResult(null);\n    } finally {\n      setPending(false);\n    }\n  };\n\n  // -------- ETHEREUM/EIP155 RPC METHODS --------\n\n  const ethereumRpc = {\n    testSendTransaction: _createJsonRpcRequestHandler(async (chainId: string, address: string, trx: ITransaction) => {\n      console.info(`testSendTransaction for trx chainId: ${chainId} address: ${address}`)\n      const caipAccountAddress = `${chainId}:${address}`;\n      const account = accounts.find((account: string) => account === caipAccountAddress);\n      if (account === undefined) throw new Error(`Account for ${caipAccountAddress} not found`);\n      const balance = BigNumber.from(balances[account][0].balance || \"0\");\n\n      let gasPriceBigN = BigNumber.from(trx.gasPrice);\n      const gasLimitBigN = BigNumber.from(trx.gasLimit);\n      let totalGasFees = gasPriceBigN.mul(gasLimitBigN);\n      if (balance.lt(totalGasFees)) {\n        console.warn(`Insufficient funds for intrinsic transaction cost`);\n        return {\n          method: DEFAULT_EIP155_METHODS.ETH_SEND_TRANSACTION,\n          address,\n          valid: false,\n          result: \"Insufficient funds for intrinsic transaction cost\",\n          toAddress: trx.to,\n          value: trx.value,\n        };\n      }\n      const transactionCost = BigNumber.from(trx.value);\n      let transactionCostBigN = transactionCost.add(totalGasFees);\n      console.info(`current balance is ${balance}. gasPrice: ${gasPriceBigN} gasLimit: ${gasLimitBigN}. transaction cost: ${transactionCostBigN}`)\n      if (balance.lt(transactionCostBigN)) {\n        console.warn(`Insufficient funds for transaction`);\n        return {\n          method: DEFAULT_EIP155_METHODS.ETH_SEND_TRANSACTION,\n          address,\n          valid: false,\n          result: \"Insufficient funds for transaction\",\n          toAddress: trx.to,\n          value: trx.value,\n        };\n      }\n      console.info(`committing trx to wc`)\n      const result = await client!.request<string>({\n        topic: session!.topic,\n        chainId,\n        request: {\n          method: DEFAULT_EIP155_METHODS.ETH_SEND_TRANSACTION,\n          params: [trx],\n        },\n      });\n      console.info(`ETH_SEND_TRANSACTION result: ${result}`)\n      return {\n        method: DEFAULT_EIP155_METHODS.ETH_SEND_TRANSACTION,\n        address,\n        valid: true,\n        result,\n        toAddress: trx.to,\n        value: trx.value,\n      };\n    }),\n    testSignTransaction: _createJsonRpcRequestHandler(async (chainId: string, address: string, tx: ITransaction): Promise<IFormattedRpcResponse> => {\n      const caipAccountAddress = `${chainId}:${address}`;\n      const account = accounts.find((account: string) => account === caipAccountAddress);\n      if (account === undefined) throw new Error(`Account for ${caipAccountAddress} not found`);\n      // const tx = await formatTestTransaction(account);\n      console.info(`testSignTransaction request for trx ${tx.from}`)\n\n      const signedTx: string = await client!.request({\n        topic: session!.topic,\n        chainId,\n        request: {\n          method: DEFAULT_EIP155_METHODS.ETH_SIGN_TRANSACTION,\n          params: [tx],\n        },\n      });\n      const valid = EthTransaction.fromSerializedTx(signedTx as any).verifySignature();\n      console.info(`send signTransaction result: ${signedTx} valid: ${valid}`)\n\n      let rpcResult = {\n        method: DEFAULT_EIP155_METHODS.ETH_SIGN_TRANSACTION,\n        address: address,\n        valid: valid,\n        result: signedTx,\n        toAddress: tx.to,\n        value: tx.value,\n      };\n      setResult(result)\n      return rpcResult;\n    }),\n    testSignPersonalMessage: _createJsonRpcRequestHandler(\n      async (chainId: string, address: string) => {\n\n        // test message\n        const message = `My email is john@doe.com - ${Date.now()}`;\n\n        // encode message (hex)\n        const hexMsg = encoding.utf8ToHex(message, true);\n\n        // personal_sign params\n        const params = [hexMsg, address];\n\n        // send message\n        const signature = await client!.request<string>({\n          topic: session!.topic,\n          chainId,\n          request: {\n            method: DEFAULT_EIP155_METHODS.PERSONAL_SIGN,\n            params,\n          },\n        });\n\n        //  split chainId\n        const [namespace, reference] = chainId.split(\":\");\n\n        const targetChainData = chainData[namespace][reference];\n\n        if (typeof targetChainData === \"undefined\") {\n          throw new Error(`Missing chain data for chainId: ${chainId}`);\n        }\n\n        const valid = _verifyEip155MessageSignature(message, signature, address);\n\n        // format displayed result\n        return {\n          method: DEFAULT_EIP155_METHODS.PERSONAL_SIGN,\n          address,\n          valid,\n          result: signature,\n        };\n      },\n    ),\n    testEthSign: _createJsonRpcRequestHandler(async (chainId: string, address: string) => {\n      // test message\n      const message = `My email is john@doe.com - ${Date.now()}`;\n      // encode message (hex)\n      const hexMsg = encoding.utf8ToHex(message, true);\n      // eth_sign params\n      const params = [address, hexMsg];\n\n      // send message\n      const signature: string = await client!.request({\n        topic: session!.topic,\n        chainId,\n        request: {\n          method: DEFAULT_EIP155_METHODS.ETH_SIGN,\n          params,\n        },\n      });\n\n      //  split chainId\n      const [namespace, reference] = chainId.split(\":\");\n\n      // const targetChainData = chainData[namespace][reference];\n      //\n      // if (typeof targetChainData === \"undefined\") {\n      //   throw new Error(`Missing chain data for chainId: ${chainId}`);\n      // }\n\n      const valid = _verifyEip155MessageSignature(message, signature, address);\n\n      // format displayed result\n      return {\n        method: DEFAULT_EIP155_METHODS.ETH_SIGN + \" (standard)\",\n        address,\n        valid,\n        result: signature,\n      };\n    }),\n  };\n\n\n  // -------- COSMOS RPC METHODS --------\n\n  // const cosmosRpc = {\n  //   testSignDirect: _createJsonRpcRequestHandler(async (chainId: string, address: string) => {\n  //     // test direct sign doc inputs\n  //     const inputs = {\n  //       fee: [{ amount: \"2000\", denom: \"ucosm\" }],\n  //       pubkey: \"AgSEjOuOr991QlHCORRmdE5ahVKeyBrmtgoYepCpQGOW\",\n  //       gasLimit: 200000,\n  //       accountNumber: 1,\n  //       sequence: 1,\n  //       bodyBytes:\n  //         \"0a90010a1c2f636f736d6f732e62616e6b2e763162657461312e4d736753656e6412700a2d636f736d6f7331706b707472653766646b6c366766727a6c65736a6a766878686c63337234676d6d6b38727336122d636f736d6f7331717970717870713971637273737a673270767871367273307a716733797963356c7a763778751a100a0575636f736d120731323334353637\",\n  //       authInfoBytes:\n  //         \"0a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21034f04181eeba35391b858633a765c4a0c189697b40d216354d50890d350c7029012040a020801180112130a0d0a0575636f736d12043230303010c09a0c\",\n  //     };\n  //\n  //     // split chainId\n  //     const [namespace, reference] = chainId.split(\":\");\n  //\n  //     // format sign doc\n  //     const signDoc = formatDirectSignDoc(\n  //       inputs.fee,\n  //       inputs.pubkey,\n  //       inputs.gasLimit,\n  //       inputs.accountNumber,\n  //       inputs.sequence,\n  //       inputs.bodyBytes,\n  //       reference,\n  //     );\n  //\n  //     // cosmos_signDirect params\n  //     const params = {\n  //       signerAddress: address,\n  //       signDoc: stringifySignDocValues(signDoc),\n  //     };\n  //\n  //     // send message\n  //     const result = await client!.request({\n  //       topic: session!.topic,\n  //       chainId,\n  //       request: {\n  //         method: DEFAULT_COSMOS_METHODS.COSMOS_SIGN_DIRECT,\n  //         params,\n  //       },\n  //     });\n  //\n  //     const targetChainData = chainData[namespace][reference];\n  //\n  //     if (typeof targetChainData === \"undefined\") {\n  //       throw new Error(`Missing chain data for chainId: ${chainId}`);\n  //     }\n  //\n  //     const valid = await verifyDirectSignature(address, result.signature, signDoc);\n  //\n  //     // format displayed result\n  //     return {\n  //       method: DEFAULT_COSMOS_METHODS.COSMOS_SIGN_DIRECT,\n  //       address,\n  //       valid,\n  //       result: result.signature,\n  //     };\n  //   }),\n  //   testSignAmino: _createJsonRpcRequestHandler(async (chainId: string, address: string) => {\n  //     // split chainId\n  //     const [namespace, reference] = chainId.split(\":\");\n  //\n  //     // test amino sign doc\n  //     const signDoc = {\n  //       msgs: [],\n  //       fee: { amount: [], gas: \"23\" },\n  //       chain_id: \"foochain\",\n  //       memo: \"hello, world\",\n  //       account_number: \"7\",\n  //       sequence: \"54\",\n  //     };\n  //\n  //     // cosmos_signAmino params\n  //     const params = { signerAddress: address, signDoc };\n  //\n  //     // send message\n  //     const result = await client!.request({\n  //       topic: session!.topic,\n  //       chainId,\n  //       request: {\n  //         method: DEFAULT_COSMOS_METHODS.COSMOS_SIGN_AMINO,\n  //         params,\n  //       },\n  //     });\n  //\n  //     const targetChainData = chainData[namespace][reference];\n  //\n  //     if (typeof targetChainData === \"undefined\") {\n  //       throw new Error(`Missing chain data for chainId: ${chainId}`);\n  //     }\n  //\n  //     const valid = await verifyAminoSignature(address, result.signature, signDoc);\n  //\n  //     // format displayed result\n  //     return {\n  //       method: DEFAULT_COSMOS_METHODS.COSMOS_SIGN_AMINO,\n  //       address,\n  //       valid,\n  //       result: result.signature,\n  //     };\n  //   }),\n  // };\n\n  // -------- SOLANA RPC METHODS --------\n\n  // const solanaRpc = {\n  //   testSignTransaction: _createJsonRpcRequestHandler(\n  //     async (chainId: string, address: string): Promise<IFormattedRpcResponse> => {\n  //       if (!solanaPublicKeys) {\n  //         throw new Error(\"Could not find Solana PublicKeys.\");\n  //       }\n  //\n  //       const senderPublicKey = solanaPublicKeys[address];\n  //\n  //       const connection = new Connection(clusterApiUrl(isTestnet ? \"testnet\" : \"mainnet-beta\"));\n  //\n  //       // Using deprecated `getRecentBlockhash` over `getLatestBlockhash` here, since `mainnet-beta`\n  //       // cluster only seems to support `connection.getRecentBlockhash` currently.\n  //       const { blockhash } = await connection.getRecentBlockhash();\n  //\n  //       const transaction = new SolanaTransaction({\n  //         feePayer: senderPublicKey,\n  //         recentBlockhash: blockhash,\n  //       }).add(\n  //         SystemProgram.transfer({\n  //           fromPubkey: senderPublicKey,\n  //           toPubkey: Keypair.generate().publicKey,\n  //           lamports: 1,\n  //         }),\n  //       );\n  //\n  //       try {\n  //         const { signature } = await client!.request({\n  //           topic: session!.topic,\n  //           request: {\n  //             method: DEFAULT_SOLANA_METHODS.SOL_SIGN_TRANSACTION,\n  //             params: {\n  //               feePayer: transaction.feePayer!.toBase58(),\n  //               recentBlockhash: transaction.recentBlockhash,\n  //               instructions: transaction.instructions.map(i => ({\n  //                 programId: i.programId.toBase58(),\n  //                 data: bs58.encode(i.data),\n  //                 keys: i.keys.map(k => ({\n  //                   isSigner: k.isSigner,\n  //                   isWritable: k.isWritable,\n  //                   pubkey: k.pubkey.toBase58(),\n  //                 })),\n  //               })),\n  //             },\n  //           },\n  //         });\n  //\n  //         // We only need `Buffer.from` here to satisfy the `Buffer` param type for `addSignature`.\n  //         // The resulting `UInt8Array` is equivalent to just `bs58.decode(...)`.\n  //         transaction.addSignature(senderPublicKey, Buffer.from(bs58.decode(signature)));\n  //\n  //         const valid = transaction.verifySignatures();\n  //\n  //         return {\n  //           method: DEFAULT_SOLANA_METHODS.SOL_SIGN_TRANSACTION,\n  //           address,\n  //           valid,\n  //           result: signature,\n  //         };\n  //       } catch (error: any) {\n  //         throw new Error(error);\n  //       }\n  //     },\n  //   ),\n  //   testSignMessage: _createJsonRpcRequestHandler(\n  //     async (chainId: string, address: string): Promise<IFormattedRpcResponse> => {\n  //       if (!solanaPublicKeys) {\n  //         throw new Error(\"Could not find Solana PublicKeys.\");\n  //       }\n  //\n  //       const senderPublicKey = solanaPublicKeys[address];\n  //\n  //       // Encode message to `UInt8Array` first via `TextEncoder` so we can pass it to `bs58.encode`.\n  //       const message = bs58.encode(\n  //         new TextEncoder().encode(`This is an example message to be signed - ${Date.now()}`),\n  //       );\n  //\n  //       try {\n  //         const { signature } = await client!.request({\n  //           topic: session!.topic,\n  //           request: {\n  //             method: DEFAULT_SOLANA_METHODS.SOL_SIGN_MESSAGE,\n  //             params: {\n  //               pubkey: senderPublicKey.toBase58(),\n  //               message,\n  //             },\n  //           },\n  //         });\n  //\n  //         const valid = verifyMessageSignature(senderPublicKey.toBase58(), signature, message);\n  //\n  //         return {\n  //           method: DEFAULT_SOLANA_METHODS.SOL_SIGN_MESSAGE,\n  //           address,\n  //           valid,\n  //           result: signature,\n  //         };\n  //       } catch (error: any) {\n  //         throw new Error(error);\n  //       }\n  //     },\n  //   ),\n  // };\n\n  return (\n    <JsonRpcContext.Provider\n      value={{\n        ping,\n        ethereumRpc,\n        rpcResult: result,\n        isRpcRequestPending: pending,\n        isTestnet,\n        setIsTestnet,\n      }}\n    >\n      {children}\n    </JsonRpcContext.Provider>\n  );\n}\n\nexport function useJsonRpc() {\n  const context = useContext(JsonRpcContext);\n  if (context === undefined) {\n    throw new Error(\"useJsonRpc must be used within a JsonRpcContextProvider\");\n  }\n  return context;\n}\n","export default __webpack_public_path__ + \"static/media/logo.916504ce.png\";","export default __webpack_public_path__ + \"static/media/promo_image_1.ffb5ea76.svg\";","export default __webpack_public_path__ + \"static/media/promo_image_2.2844eac7.svg\";","export default __webpack_public_path__ + \"static/media/promo_image_3.ac1a9ffa.svg\";","import i18next from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport translationEnglish from \"../assets/locales/en/special.json\";\nimport translationSpanish from \"../assets/locales/es/special.json\";\n\nconst resources = {\n    en: {\n        special: translationEnglish,\n    },\n    es: {\n        special: translationSpanish,\n    },\n}\n\ni18next\n    .use(initReactI18next)\n    .use(LanguageDetector)\n    .init({\n        resources,\n        debug: true,\n        fallbackLng: \"en\",\n        ns: ['special'],\n    });\n\n\nexport default i18next;\n","import React, {lazy, Suspense} from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './assets/styles/index.scss';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store';\nimport {JsonRpcContextProvider} from \"./contexts/JsonRpcContext\";\nimport {WalletConnectProvider} from \"./contexts/walletConnect\";\nimport {ErrorPage} from \"./pages/error\";\nimport {Landing} from \"./pages/landing\";\nimport \"./utils/i18utils\";\n\nconst Main = React.lazy(() =>\n    import(\"./pages\").then((module) => ({\n        default: module.Main,\n    }))\n);\n\n//FIXME needed ?\n//i18next.use();\n\nReactDOM.render(\n  <Provider store={store}>\n    <WalletConnectProvider>\n      <JsonRpcContextProvider>\n          <Suspense fallback={Landing}>\n          {/*<I18nextProvider i18n={i18next}>*/}\n          <Router>\n              <Switch>\n                  {/*<Route path={'/pay'} component={Pay}></Route>*/}\n                  <Route path={'/error'} component={ErrorPage}></Route>\n                  {/*<Route path={'/merchant/register'} component={RegisterMerchant}></Route>*/}\n                  <Route path={'/'} component={Main} ></Route>\n              </Switch>\n            <ToastContainer\n              toastClassName=\"w-full m-w-45 flex bg-black bg-opacity-90 border-2 border-secondary rounded-16xl shadow-md p-4 text-sm\"\n              bodyClassName={() => 'text-sm font-white font-med block p-1'}\n              autoClose={false}\n              icon={true}\n              position=\"bottom-center\"\n              hideProgressBar={true}\n              closeOnClick={false}\n            />\n          </Router>\n          {/*</I18nextProvider>*/}\n          </Suspense>\n        </JsonRpcContextProvider>\n    </WalletConnectProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n","import logoIcon from '../assets/images/logo.png';\nimport promo1 from '../assets/images/promo_image_1.svg';\nimport promo2 from '../assets/images/promo_image_2.svg';\nimport promo3 from '../assets/images/promo_image_3.svg';\nimport React from \"react\";\n\nexport const ErrorPage = () => {\n\n\n\n    return (\n        <div className=\"h-screen w-screen flex twoColumnContainer\">\n            {/*Left Column*/}\n            <div className=\"h-full w-full flex items-center justify-around flex-col bg-white shadow-md py-40\">\n                <div className=\"flex items-center justify-center \">\n                    <img className=\"w-12 h-12\" src={logoIcon} alt=\"\"/>\n                    <div className=\"w-full flex flex-col p-4\">\n                        <h1 className=\"text-xl font-righteous\">Storefront Pay</h1>\n                    </div>\n                </div>\n\n\n                <div className=\"w-3/4 flex justify-around py-4\">\n                <div className=\"flex flex-col p-4\">\n                    <p className=\"text-sm\">error</p>\n                    <p className=\"font-bold text-xl\">Something went wrong</p>\n                </div>\n                </div>\n\n\n            </div>\n\n            {/*Right Column*/}\n            <div className=\"w-full flex items-center justify-center flex-col py-10\">\n                <div id=\"qrcode2\" className=\"flex items-center justify-center rounded-10xl overflow-hidden m-10 qrcode\">\n                    <img className=\"w-16 h-16\" src={logoIcon} alt=\"\"/>\n                </div>\n                <h1 className=\"text-white text-xl text-center font-bold mx-40 \">Accept Crypto Payments and Drive Incremental Sales Now!</h1>\n\n                <img className=\"w-16 h-16 mt-4\" src={promo1} alt=\"\"/>\n                <p className=\"text-white font-bold mt-4\">Reach Millions of Users</p>\n                <p className=\"text-white text-center text-sm mt-4 mx-40\">Access to millions of users using wallet apps, and capitalise on the world's largest adoption rate. </p>\n\n                <img className=\"w-16 h-16 mt-10\" src={promo2} alt=\"\"/>\n                <p className=\"text-white font-bold mt-4\">Lowest Cost</p>\n                <p className=\"text-white text-center text-sm mt-4 mx-40\">Pay zero transactions fees and save up to 85% on settlement fees. </p>\n\n                <img className=\"w-16 h-16 mt-10\" src={promo3} alt=\"\"/>\n                <p className=\"text-white font-bold mt-4\">Easy Integration</p>\n                <p className=\"text-white text-center text-sm mt-4 mx-40\">Integrate with a few clicks using our SDK or plugins. No coding experience needed. </p>\n            </div>\n        </div>\n    );\n};\n","\nexport const DEVELOPMENT = 0\nexport const TEST = 1\n\nconst MAINNET_MODE = false;\n\n\nexport const BUILD_CONFIG = DEVELOPMENT;\n// export const BUILD_CONFIG = TEST;\n\n// @ts-ignore\nexport const isDevMode = () => BUILD_CONFIG === DEVELOPMENT;\n\n\nexport const isTestnetMode = () => !MAINNET_MODE;\n\n\nconst ethereumGorliTestnetRpcUrl = \"https://goerli.infura.io/v3/f785cca3f0854d5a9b04078a6e380b09\";\nconst ethereumMainnetRpcUrl = 'https://mainnet.infura.io/v3/cd5b0778994b4e34b166f2569a1166c0';\n\n//TODO Move to move to another INFURA account, since polygon mumbai api requires credit card\nconst polygonTestnetRpcUrl = \"https://matic-testnet-archive-rpc.bwarelabs.com/\";\nconst polygonMainnetRpcUrl = \"https://rpc-mainnet.matic.network\";\n\n\n\nexport const ethereumRpcUrl = MAINNET_MODE && !isDevMode() ? ethereumMainnetRpcUrl : ethereumGorliTestnetRpcUrl;\nexport const polygonRpcUrl = MAINNET_MODE && !isDevMode() ?  polygonMainnetRpcUrl : polygonTestnetRpcUrl;\n","import axios from './axios';\nimport {IMerchant, IOrder} from \"../models\";\n\nexport const UserService = (function () {\n  const loginApi = async (payload: string) => {\n    return axios.get(`/fund/members/${payload}/login`);\n  };\n\n  const getMeApi = async () => {\n    return axios.get('/fund/members/me');\n  };\n\n  const getTickersApi = async () => {\n    return axios.get('/tickers');\n  };\n\n  const nonceApi = async (payload: string) => {\n    return axios.get(`/merchants/${payload}/nonce`);\n  };\n\n  const getMerchantInfoApi = async (address: string) => {\n    return axios.get(`/merchants/${address}`);\n  };\n\n  const getOrderApi = async (orderTrackingId: string) => {\n    return axios.get(`/merchants/orders/${orderTrackingId}`);\n  };\n\n  const createNewOrder = async (address: string, order: IOrder) => {\n    return axios.post(`/merchants/${address}/orders`, order);\n  };\n\n  const createNewMerchant = async (order: IMerchant) => {\n    return axios.post(`/merchants?nonce=${axios.getNonce()}&signature=${axios.getSignature()}`, order, {}, false);\n  };\n\n  const linkOrderTransaction = async (orderTrackingId: string, transactionHash: string, nativeAmount: number) => {\n    return axios.post(`/merchants/orders/${orderTrackingId}/transaction`, {transactionHash: transactionHash, nativeAmount: nativeAmount});\n  };\n\n  return {\n    loginApi,\n    getMeApi,\n    getTickersApi,\n    getMerchantInfoApi,\n    createNewOrder,\n    getOrderApi,\n    linkOrderTransaction,\n    createNewMerchant,\n    nonceApi\n  };\n})();\n"],"sourceRoot":""}